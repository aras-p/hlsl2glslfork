
/*  A Bison parser, made from hlslang.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	CONST_QUAL	258
#define	STATIC_QUAL	259
#define	BOOL_TYPE	260
#define	FLOAT_TYPE	261
#define	INT_TYPE	262
#define	STRING_TYPE	263
#define	FIXED_TYPE	264
#define	HALF_TYPE	265
#define	BREAK	266
#define	CONTINUE	267
#define	DO	268
#define	ELSE	269
#define	FOR	270
#define	IF	271
#define	DISCARD	272
#define	RETURN	273
#define	BVEC2	274
#define	BVEC3	275
#define	BVEC4	276
#define	IVEC2	277
#define	IVEC3	278
#define	IVEC4	279
#define	VEC2	280
#define	VEC3	281
#define	VEC4	282
#define	HVEC2	283
#define	HVEC3	284
#define	HVEC4	285
#define	FVEC2	286
#define	FVEC3	287
#define	FVEC4	288
#define	MATRIX2x2	289
#define	MATRIX2x3	290
#define	MATRIX2x4	291
#define	MATRIX3x2	292
#define	MATRIX3x3	293
#define	MATRIX3x4	294
#define	MATRIX4x2	295
#define	MATRIX4x3	296
#define	MATRIX4x4	297
#define	HMATRIX2x2	298
#define	HMATRIX2x3	299
#define	HMATRIX2x4	300
#define	HMATRIX3x2	301
#define	HMATRIX3x3	302
#define	HMATRIX3x4	303
#define	HMATRIX4x2	304
#define	HMATRIX4x3	305
#define	HMATRIX4x4	306
#define	FMATRIX2x2	307
#define	FMATRIX2x3	308
#define	FMATRIX2x4	309
#define	FMATRIX3x2	310
#define	FMATRIX3x3	311
#define	FMATRIX3x4	312
#define	FMATRIX4x2	313
#define	FMATRIX4x3	314
#define	FMATRIX4x4	315
#define	IN_QUAL	316
#define	OUT_QUAL	317
#define	INOUT_QUAL	318
#define	UNIFORM	319
#define	STRUCT	320
#define	VOID_TYPE	321
#define	WHILE	322
#define	SAMPLER1D	323
#define	SAMPLER2D	324
#define	SAMPLER3D	325
#define	SAMPLERCUBE	326
#define	SAMPLER1DSHADOW	327
#define	SAMPLER2DSHADOW	328
#define	SAMPLERRECTSHADOW	329
#define	SAMPLERRECT	330
#define	SAMPLER2D_HALF	331
#define	SAMPLER2D_FLOAT	332
#define	SAMPLERCUBE_HALF	333
#define	SAMPLERCUBE_FLOAT	334
#define	SAMPLERGENERIC	335
#define	VECTOR	336
#define	MATRIX	337
#define	REGISTER	338
#define	TEXTURE	339
#define	SAMPLERSTATE	340
#define	IDENTIFIER	341
#define	TYPE_NAME	342
#define	FLOATCONSTANT	343
#define	INTCONSTANT	344
#define	BOOLCONSTANT	345
#define	STRINGCONSTANT	346
#define	FIELD_SELECTION	347
#define	LEFT_OP	348
#define	RIGHT_OP	349
#define	INC_OP	350
#define	DEC_OP	351
#define	LE_OP	352
#define	GE_OP	353
#define	EQ_OP	354
#define	NE_OP	355
#define	AND_OP	356
#define	OR_OP	357
#define	XOR_OP	358
#define	MUL_ASSIGN	359
#define	DIV_ASSIGN	360
#define	ADD_ASSIGN	361
#define	MOD_ASSIGN	362
#define	LEFT_ASSIGN	363
#define	RIGHT_ASSIGN	364
#define	AND_ASSIGN	365
#define	XOR_ASSIGN	366
#define	OR_ASSIGN	367
#define	SUB_ASSIGN	368
#define	LEFT_PAREN	369
#define	RIGHT_PAREN	370
#define	LEFT_BRACKET	371
#define	RIGHT_BRACKET	372
#define	LEFT_BRACE	373
#define	RIGHT_BRACE	374
#define	DOT	375
#define	COMMA	376
#define	COLON	377
#define	EQUAL	378
#define	SEMICOLON	379
#define	BANG	380
#define	DASH	381
#define	TILDE	382
#define	PLUS	383
#define	STAR	384
#define	SLASH	385
#define	PERCENT	386
#define	LEFT_ANGLE	387
#define	RIGHT_ANGLE	388
#define	VERTICAL_BAR	389
#define	CARET	390
#define	AMPERSAND	391
#define	QUESTION	392

#line 7 "hlslang.y"


/* Based on:
ANSI C Yacc grammar

In 1985, Jeff Lee published his Yacc grammar (which is accompanied by a 
matching Lex specification) for the April 30, 1985 draft version of the 
ANSI C standard.  Tom Stockfisch reposted it to net.sources in 1987; that
original, as mentioned in the answer to question 17.25 of the comp.lang.c
FAQ, can be ftp'ed from ftp.uu.net, file usenet/net.sources/ansi.c.grammar.Z.
 
I intend to keep this version as close to the current C Standard grammar as 
possible; please let me know if you discover discrepancies. 

Jutta Degener, 1995 
*/

#include "SymbolTable.h"
#include "ParseHelper.h"
#include "../../include/hlsl2glsl.h"

#ifdef _WIN32
    #define YYPARSE_PARAM parseContext
    #define YYPARSE_PARAM_DECL TParseContext&
    #define YY_DECL int yylex(YYSTYPE* pyylval, TParseContext& parseContext)
    #define YYLEX_PARAM parseContext
	void yyerror(const char*);
#else
    #define YYPARSE_PARAM parseContextLocal
    #define parseContext (*((TParseContext*)(parseContextLocal)))
    #define YY_DECL int yylex(YYSTYPE* pyylval, void* parseContextLocal)
    #define YYLEX_PARAM (void*)(parseContextLocal)
    extern void yyerror(const char*);
#endif


#define FRAG_ONLY(S, L) {                                                       \
    if (parseContext.language != EShLangFragment) {                             \
        parseContext.error(L, " supported in fragment shaders only ", S, "", "");          \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define NONSQUARE_MATRIX_CHECK(S, L) { \
	if (parseContext.targetVersion < ETargetGLSL_120) { \
		parseContext.error(L, " not supported in pre-GLSL1.20", S, "", ""); \
		parseContext.recover(); \
	} \
}

#define UNSUPPORTED_FEATURE(S, L) {                                                       \
    parseContext.error(L, " not supported ", S, "", "");              \
    parseContext.recover();                                                            \
}

#define SET_BASIC_TYPE(RES,PAR,T,PREC) \
	TQualifier qual = parseContext.getDefaultQualifier(); \
	(RES).setBasic(T, qual, (PAR).line); \
	(RES).precision = PREC



#line 69 "hlslang.y"
typedef union {
    struct {
        TSourceLoc line;
        union {
            TString *string;
            float f;
            int i;
            bool b;
        };
        TSymbol* symbol;
    } lex;
    struct {
        TSourceLoc line;
        TOperator op;
        union {
            TIntermNode* intermNode;
            TIntermNodePair nodePair;
            TIntermTyped* intermTypedNode;
            TIntermAggregate* intermAggregate;
			TIntermTyped* intermDeclaration;
        };
        union {
            TPublicType type;
            TQualifier qualifier;
            TFunction* function;
            TParameter param;
            TTypeLine typeLine;
            TTypeList* typeList;
	    TAnnotation* ann;
	    TTypeInfo* typeInfo;
        };
    } interm;
} YYSTYPE;
#line 103 "hlslang.y"

#ifndef _WIN32
    extern int yylex(YYSTYPE*, void*);
#endif

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		496
#define	YYFLAG		-32768
#define	YYNTBASE	138

#define YYTRANSLATE(x) ((unsigned)(x) <= 392 ? yytranslate[x] : 230)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    14,    16,    21,    23,
    27,    30,    33,    35,    37,    39,    43,    46,    49,    52,
    54,    57,    61,    64,    66,    68,    70,    72,    75,    78,
    81,    86,    88,    90,    92,    94,    96,   100,   104,   108,
   110,   114,   118,   120,   124,   128,   130,   134,   138,   142,
   146,   148,   152,   156,   158,   162,   164,   168,   170,   174,
   176,   180,   182,   186,   188,   192,   194,   200,   202,   206,
   208,   210,   212,   214,   216,   218,   220,   222,   224,   226,
   228,   230,   234,   236,   239,   242,   245,   250,   252,   254,
   257,   261,   265,   268,   273,   277,   282,   288,   296,   300,
   303,   307,   310,   311,   313,   315,   317,   319,   321,   326,
   333,   341,   350,   360,   367,   369,   373,   379,   386,   394,
   403,   409,   411,   414,   416,   418,   421,   424,   426,   428,
   433,   435,   437,   439,   441,   443,   445,   452,   459,   466,
   468,   470,   472,   474,   476,   478,   480,   482,   484,   486,
   488,   490,   492,   494,   496,   498,   500,   502,   504,   506,
   508,   510,   512,   514,   516,   518,   520,   522,   524,   526,
   528,   530,   532,   534,   536,   538,   540,   542,   544,   546,
   548,   550,   552,   554,   556,   558,   560,   562,   564,   566,
   568,   570,   572,   574,   576,   578,   580,   582,   588,   593,
   595,   598,   602,   604,   608,   610,   614,   619,   626,   628,
   630,   632,   634,   636,   638,   640,   642,   644,   646,   648,
   651,   652,   653,   659,   661,   663,   666,   670,   672,   675,
   677,   680,   686,   690,   692,   694,   699,   700,   707,   708,
   717,   718,   726,   728,   730,   732,   733,   736,   740,   743,
   746,   749,   753,   756,   758,   761,   763,   765,   767,   768,
   772,   776,   781,   783,   785,   789,   793,   796,   800,   802,
   805,   811,   813,   815,   817,   819,   821,   823,   825,   827,
   829,   831,   833,   835,   837,   839,   841,   843,   845,   847,
   849,   851,   853,   855,   857,   859,   861,   863,   865,   867,
   872,   874,   878,   882,   888,   891,   892,   894,   896,   898,
   901,   904,   907,   911,   916,   920,   922,   925,   930,   937,
   944,   949,   956
};

static const short yyrhs[] = {    86,
     0,   138,     0,    89,     0,    88,     0,    90,     0,   114,
   165,   115,     0,   139,     0,   140,   116,   141,   117,     0,
   142,     0,   140,   120,    92,     0,   140,    95,     0,   140,
    96,     0,   165,     0,   143,     0,   144,     0,   140,   120,
   144,     0,   146,   115,     0,   145,   115,     0,   147,    66,
     0,   147,     0,   147,   163,     0,   146,   121,   163,     0,
   148,   114,     0,   180,     0,    86,     0,    92,     0,   140,
     0,    95,   149,     0,    96,   149,     0,   150,   149,     0,
   114,   181,   115,   149,     0,   128,     0,   126,     0,   125,
     0,   127,     0,   149,     0,   151,   129,   149,     0,   151,
   130,   149,     0,   151,   131,   149,     0,   151,     0,   152,
   128,   151,     0,   152,   126,   151,     0,   152,     0,   153,
    93,   152,     0,   153,    94,   152,     0,   153,     0,   154,
   132,   153,     0,   154,   133,   153,     0,   154,    97,   153,
     0,   154,    98,   153,     0,   154,     0,   155,    99,   154,
     0,   155,   100,   154,     0,   155,     0,   156,   136,   155,
     0,   156,     0,   157,   135,   156,     0,   157,     0,   158,
   134,   157,     0,   158,     0,   159,   101,   158,     0,   159,
     0,   160,   103,   159,     0,   160,     0,   161,   102,   160,
     0,   161,     0,   161,   137,   165,   122,   163,     0,   162,
     0,   149,   164,   163,     0,   123,     0,   104,     0,   105,
     0,   107,     0,   106,     0,   113,     0,   108,     0,   109,
     0,   110,     0,   111,     0,   112,     0,   163,     0,   165,
   121,   163,     0,   162,     0,   168,   124,     0,   176,   124,
     0,   169,   115,     0,   169,   115,   122,    86,     0,   171,
     0,   170,     0,   171,   173,     0,   170,   121,   173,     0,
   178,    86,   114,     0,   180,    86,     0,   180,    86,   123,
   187,     0,   180,    86,   224,     0,   180,    86,   122,    86,
     0,   180,    86,   116,   166,   117,     0,   180,    86,   116,
   166,   117,   122,    86,     0,   179,   174,   172,     0,   174,
   172,     0,   179,   174,   175,     0,   174,   175,     0,     0,
    61,     0,    62,     0,    63,     0,   180,     0,   177,     0,
   176,   121,    86,   226,     0,   176,   121,    86,   116,   117,
   226,     0,   176,   121,    86,   116,   166,   117,   226,     0,
   176,   121,    86,   116,   117,   226,   123,   187,     0,   176,
   121,    86,   116,   166,   117,   226,   123,   187,     0,   176,
   121,    86,   226,   123,   187,     0,   178,     0,   178,    86,
   226,     0,   178,    86,   116,   117,   226,     0,   178,    86,
   116,   166,   117,   226,     0,   178,    86,   116,   117,   226,
   123,   187,     0,   178,    86,   116,   166,   117,   226,   123,
   187,     0,   178,    86,   226,   123,   187,     0,   180,     0,
   179,   180,     0,     3,     0,     4,     0,     4,     3,     0,
     3,     4,     0,    64,     0,   181,     0,   181,   116,   166,
   117,     0,    66,     0,     6,     0,    10,     0,     9,     0,
     7,     0,     5,     0,    81,   132,     6,   121,    89,   133,
     0,    81,   132,     7,   121,    89,   133,     0,    81,   132,
     5,   121,    89,   133,     0,    25,     0,    26,     0,    27,
     0,    28,     0,    29,     0,    30,     0,    31,     0,    32,
     0,    33,     0,    19,     0,    20,     0,    21,     0,    22,
     0,    23,     0,    24,     0,    34,     0,    35,     0,    36,
     0,    37,     0,    38,     0,    39,     0,    40,     0,    41,
     0,    42,     0,    43,     0,    44,     0,    45,     0,    46,
     0,    47,     0,    48,     0,    49,     0,    50,     0,    51,
     0,    52,     0,    53,     0,    54,     0,    55,     0,    56,
     0,    57,     0,    58,     0,    59,     0,    60,     0,    84,
     0,    80,     0,    68,     0,    69,     0,    76,     0,    77,
     0,    70,     0,    71,     0,    78,     0,    79,     0,    75,
     0,    74,     0,    72,     0,    73,     0,   182,     0,    87,
     0,    65,    86,   118,   183,   119,     0,    65,   118,   183,
   119,     0,   184,     0,   183,   184,     0,   180,   185,   124,
     0,   186,     0,   185,   121,   186,     0,    86,     0,    86,
   122,    86,     0,    86,   116,   166,   117,     0,    86,   116,
   166,   117,   122,    86,     0,   163,     0,   213,     0,   227,
     0,   167,     0,   191,     0,   190,     0,   188,     0,   197,
     0,   198,     0,   201,     0,   208,     0,   118,   119,     0,
     0,     0,   118,   192,   196,   193,   119,     0,   195,     0,
   190,     0,   118,   119,     0,   118,   196,   119,     0,   189,
     0,   196,   189,     0,   124,     0,   165,   124,     0,    16,
   114,   165,   115,   199,     0,   189,    14,   189,     0,   189,
     0,   165,     0,   178,    86,   123,   187,     0,     0,    67,
   114,   202,   200,   115,   194,     0,     0,    13,   203,   189,
    67,   114,   165,   115,   124,     0,     0,    15,   114,   204,
   205,   207,   115,   194,     0,   197,     0,   188,     0,   200,
     0,     0,   206,   124,     0,   206,   124,   165,     0,    12,
   124,     0,    11,   124,     0,    18,   124,     0,    18,   165,
   124,     0,    17,   124,     0,   210,     0,   209,   210,     0,
   211,     0,   167,     0,   124,     0,     0,   168,   212,   195,
     0,   118,   214,   119,     0,   118,   214,   121,   119,     0,
   163,     0,   213,     0,   214,   121,   163,     0,   214,   121,
   213,     0,   132,   133,     0,   132,   216,   133,     0,   217,
     0,   216,   217,     0,   218,    86,   123,   219,   124,     0,
     6,     0,    10,     0,     9,     0,     7,     0,     5,     0,
     8,     0,    19,     0,    20,     0,    21,     0,    22,     0,
    23,     0,    24,     0,    25,     0,    26,     0,    27,     0,
    28,     0,    29,     0,    30,     0,    31,     0,    32,     0,
    33,     0,   220,     0,    91,     0,   221,     0,   223,     0,
    89,     0,    90,     0,    88,     0,   218,   114,   222,   115,
     0,   220,     0,   222,   121,   220,     0,   118,   222,   119,
     0,   122,    83,   114,    86,   115,     0,   122,    86,     0,
     0,   225,     0,   224,     0,   215,     0,   225,   215,     0,
   225,   224,     0,   224,   215,     0,   225,   224,   215,     0,
    85,   118,   228,   119,     0,    85,   118,   119,     0,   229,
     0,   228,   229,     0,    86,   123,    86,   124,     0,    86,
   123,   132,    86,   133,   124,     0,    86,   123,   114,    86,
   115,   124,     0,    84,   123,    86,   124,     0,    84,   123,
   132,    86,   133,   124,     0,    84,   123,   114,    86,   115,
   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   182,   220,   223,   228,   233,   238,   244,   247,   311,   314,
   401,   411,   424,   438,   554,   557,   575,   579,   586,   590,
   597,   606,   618,   626,   653,   665,   675,   678,   688,   698,
   716,   751,   752,   753,   754,   760,   761,   762,   763,   767,
   768,   769,   773,   774,   775,   779,   780,   781,   782,   783,
   787,   788,   789,   793,   794,   798,   799,   803,   804,   808,
   809,   813,   814,   818,   819,   823,   824,   839,   840,   854,
   855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
   868,   871,   882,   890,   891,   895,   928,   965,   968,   975,
   983,  1004,  1036,  1047,  1060,  1072,  1084,  1102,  1131,  1136,
  1146,  1151,  1161,  1164,  1167,  1170,  1176,  1183,  1186,  1204,
  1228,  1256,  1283,  1316,  1350,  1353,  1371,  1394,  1420,  1446,
  1476,  1524,  1527,  1544,  1547,  1550,  1553,  1556,  1564,  1567,
  1582,  1585,  1588,  1591,  1594,  1597,  1600,  1611,  1622,  1633,
  1637,  1641,  1645,  1649,  1653,  1657,  1661,  1665,  1669,  1673,
  1677,  1681,  1685,  1689,  1693,  1697,  1702,  1707,  1712,  1716,
  1721,  1726,  1731,  1735,  1739,  1744,  1749,  1754,  1758,  1763,
  1768,  1773,  1777,  1781,  1786,  1791,  1796,  1800,  1805,  1810,
  1815,  1819,  1822,  1825,  1828,  1831,  1834,  1837,  1840,  1843,
  1846,  1849,  1852,  1855,  1858,  1861,  1865,  1877,  1887,  1895,
  1898,  1913,  1946,  1950,  1956,  1961,  1967,  1977,  1993,  1994,
  1995,  1999,  2003,  2004,  2010,  2011,  2012,  2013,  2014,  2018,
  2019,  2019,  2019,  2027,  2028,  2033,  2036,  2044,  2047,  2053,
  2054,  2058,  2066,  2070,  2080,  2085,  2102,  2102,  2107,  2107,
  2114,  2114,  2127,  2130,  2136,  2139,  2145,  2149,  2156,  2163,
  2170,  2177,  2197,  2208,  2212,  2219,  2222,  2225,  2229,  2298,
  2318,  2321,  2328,  2332,  2336,  2340,  2347,  2351,  2357,  2361,
  2368,  2374,  2375,  2376,  2377,  2378,  2379,  2380,  2381,  2382,
  2383,  2384,  2385,  2386,  2387,  2388,  2389,  2390,  2391,  2392,
  2393,  2394,  2398,  2399,  2400,  2401,  2405,  2408,  2411,  2417,
  2421,  2422,  2426,  2430,  2436,  2440,  2441,  2442,  2443,  2444,
  2445,  2446,  2447,  2451,  2456,  2461,  2462,  2466,  2467,  2468,
  2469,  2470,  2471
};

static const char * const yytname[] = {   "$","error","$undefined.","CONST_QUAL",
"STATIC_QUAL","BOOL_TYPE","FLOAT_TYPE","INT_TYPE","STRING_TYPE","FIXED_TYPE",
"HALF_TYPE","BREAK","CONTINUE","DO","ELSE","FOR","IF","DISCARD","RETURN","BVEC2",
"BVEC3","BVEC4","IVEC2","IVEC3","IVEC4","VEC2","VEC3","VEC4","HVEC2","HVEC3",
"HVEC4","FVEC2","FVEC3","FVEC4","MATRIX2x2","MATRIX2x3","MATRIX2x4","MATRIX3x2",
"MATRIX3x3","MATRIX3x4","MATRIX4x2","MATRIX4x3","MATRIX4x4","HMATRIX2x2","HMATRIX2x3",
"HMATRIX2x4","HMATRIX3x2","HMATRIX3x3","HMATRIX3x4","HMATRIX4x2","HMATRIX4x3",
"HMATRIX4x4","FMATRIX2x2","FMATRIX2x3","FMATRIX2x4","FMATRIX3x2","FMATRIX3x3",
"FMATRIX3x4","FMATRIX4x2","FMATRIX4x3","FMATRIX4x4","IN_QUAL","OUT_QUAL","INOUT_QUAL",
"UNIFORM","STRUCT","VOID_TYPE","WHILE","SAMPLER1D","SAMPLER2D","SAMPLER3D","SAMPLERCUBE",
"SAMPLER1DSHADOW","SAMPLER2DSHADOW","SAMPLERRECTSHADOW","SAMPLERRECT","SAMPLER2D_HALF",
"SAMPLER2D_FLOAT","SAMPLERCUBE_HALF","SAMPLERCUBE_FLOAT","SAMPLERGENERIC","VECTOR",
"MATRIX","REGISTER","TEXTURE","SAMPLERSTATE","IDENTIFIER","TYPE_NAME","FLOATCONSTANT",
"INTCONSTANT","BOOLCONSTANT","STRINGCONSTANT","FIELD_SELECTION","LEFT_OP","RIGHT_OP",
"INC_OP","DEC_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","XOR_OP",
"MUL_ASSIGN","DIV_ASSIGN","ADD_ASSIGN","MOD_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN",
"AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","SUB_ASSIGN","LEFT_PAREN","RIGHT_PAREN",
"LEFT_BRACKET","RIGHT_BRACKET","LEFT_BRACE","RIGHT_BRACE","DOT","COMMA","COLON",
"EQUAL","SEMICOLON","BANG","DASH","TILDE","PLUS","STAR","SLASH","PERCENT","LEFT_ANGLE",
"RIGHT_ANGLE","VERTICAL_BAR","CARET","AMPERSAND","QUESTION","variable_identifier",
"primary_expression","postfix_expression","int_expression","function_call","function_call_or_method",
"function_call_generic","function_call_header_no_parameters","function_call_header_with_parameters",
"function_call_header","function_identifier","unary_expression","unary_operator",
"mul_expression","add_expression","shift_expression","rel_expression","eq_expression",
"and_expression","xor_expression","or_expression","log_and_expression","log_xor_expression",
"log_or_expression","cond_expression","assign_expression","assignment_operator",
"expression","const_expression","declaration","function_prototype","function_declarator",
"function_header_with_parameters","function_header","parameter_declarator","parameter_declaration",
"parameter_qualifier","parameter_type_specifier","init_declarator_list","single_declaration",
"fully_specified_type","type_qualifier","type_specifier","type_specifier_nonarray",
"struct_specifier","struct_declaration_list","struct_declaration","struct_declarator_list",
"struct_declarator","initializer","declaration_statement","statement","simple_statement",
"compound_statement","@1","@2","statement_no_new_scope","compound_statement_no_new_scope",
"statement_list","expression_statement","selection_statement","selection_rest_statement",
"condition","iteration_statement","@3","@4","@5","for_init_statement","conditionopt",
"for_rest_statement","jump_statement","translation_unit","external_declaration",
"function_definition","@6","initialization_list","initializer_list","annotation",
"annotation_list","annotation_item","ann_type","ann_literal","ann_numerical_constant",
"ann_literal_constructor","ann_value_list","ann_literal_init_list","register_specifier",
"semantic","type_info","sampler_initializer","sampler_init_list","sampler_init_item",
""
};
#endif

static const short yyr1[] = {     0,
   138,   139,   139,   139,   139,   139,   140,   140,   140,   140,
   140,   140,   141,   142,   143,   143,   144,   144,   145,   145,
   146,   146,   147,   148,   148,   148,   149,   149,   149,   149,
   149,   150,   150,   150,   150,   151,   151,   151,   151,   152,
   152,   152,   153,   153,   153,   154,   154,   154,   154,   154,
   155,   155,   155,   156,   156,   157,   157,   158,   158,   159,
   159,   160,   160,   161,   161,   162,   162,   163,   163,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   165,   165,   166,   167,   167,   168,   168,   169,   169,   170,
   170,   171,   172,   172,   172,   172,   172,   172,   173,   173,
   173,   173,   174,   174,   174,   174,   175,   176,   176,   176,
   176,   176,   176,   176,   177,   177,   177,   177,   177,   177,
   177,   178,   178,   179,   179,   179,   179,   179,   180,   180,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   182,   182,   183,
   183,   184,   185,   185,   186,   186,   186,   186,   187,   187,
   187,   188,   189,   189,   190,   190,   190,   190,   190,   191,
   192,   193,   191,   194,   194,   195,   195,   196,   196,   197,
   197,   198,   199,   199,   200,   200,   202,   201,   203,   201,
   204,   201,   205,   205,   206,   206,   207,   207,   208,   208,
   208,   208,   208,   209,   209,   210,   210,   210,   212,   211,
   213,   213,   214,   214,   214,   214,   215,   215,   216,   216,
   217,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   219,   219,   219,   219,   220,   220,   220,   221,
   222,   222,   223,   224,   225,   226,   226,   226,   226,   226,
   226,   226,   226,   227,   227,   228,   228,   229,   229,   229,
   229,   229,   229
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     3,     1,     4,     1,     3,
     2,     2,     1,     1,     1,     3,     2,     2,     2,     1,
     2,     3,     2,     1,     1,     1,     1,     2,     2,     2,
     4,     1,     1,     1,     1,     1,     3,     3,     3,     1,
     3,     3,     1,     3,     3,     1,     3,     3,     3,     3,
     1,     3,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     5,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     2,     2,     2,     4,     1,     1,     2,
     3,     3,     2,     4,     3,     4,     5,     7,     3,     2,
     3,     2,     0,     1,     1,     1,     1,     1,     4,     6,
     7,     8,     9,     6,     1,     3,     5,     6,     7,     8,
     5,     1,     2,     1,     1,     2,     2,     1,     1,     4,
     1,     1,     1,     1,     1,     1,     6,     6,     6,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     4,     1,
     2,     3,     1,     3,     1,     3,     4,     6,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     0,     0,     5,     1,     1,     2,     3,     1,     2,     1,
     2,     5,     3,     1,     1,     4,     0,     6,     0,     8,
     0,     7,     1,     1,     1,     0,     2,     3,     2,     2,
     2,     3,     2,     1,     2,     1,     1,     1,     0,     3,
     3,     4,     1,     1,     3,     3,     2,     3,     1,     2,
     5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
     1,     3,     3,     5,     2,     0,     1,     1,     1,     2,
     2,     2,     3,     4,     3,     1,     2,     4,     6,     6,
     4,     6,     6
};

static const short yydefact[] = {     0,
   124,   125,   136,   132,   135,   134,   133,   149,   150,   151,
   152,   153,   154,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   128,
     0,   131,   184,   185,   188,   189,   194,   195,   193,   192,
   186,   187,   190,   191,   183,     0,   182,   197,   258,   257,
   259,     0,    89,   103,     0,   108,   115,     0,   122,   129,
   196,     0,   254,   256,   127,   126,     0,     0,     0,    84,
     0,    86,   103,   104,   105,   106,    90,     0,   103,     0,
    85,   306,   123,     0,   255,     0,     0,     0,   200,     0,
     0,     0,     0,   260,     0,    91,   100,   102,   107,     0,
   306,    92,     0,     0,     0,   309,   308,   307,   116,     1,
     4,     3,     5,    26,     0,     0,     0,    34,    33,    35,
    32,     2,     7,    27,     9,    14,    15,     0,     0,    20,
     0,    36,     0,    40,    43,    46,    51,    54,    56,    58,
    60,    62,    64,    66,    83,     0,    24,     0,   205,     0,
   203,   199,   201,     0,     0,     0,     0,     0,   239,     0,
     0,     0,     0,     0,   221,   226,   230,    36,    68,    81,
     0,   212,     0,   122,   215,   228,   214,   213,     0,   216,
   217,   218,   219,    87,    93,    99,   101,     0,   109,   306,
     0,     0,   305,   276,   272,   275,   277,   274,   273,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   267,     0,   269,     0,   312,     0,
   310,   311,     0,    28,    29,     0,   129,    11,    12,     0,
     0,    18,    17,     0,   131,    21,    23,    30,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   130,   198,
     0,     0,     0,   202,     0,     0,     0,   250,   249,     0,
   241,     0,   253,   251,     0,   237,   220,     0,    71,    72,
    74,    73,    76,    77,    78,    79,    80,    75,    70,     0,
     0,   231,   227,   229,     0,     0,     0,    95,   306,     0,
     0,   117,   306,     0,   268,   270,     0,   313,     0,     0,
   209,   121,   210,   211,     6,     0,     0,    13,    25,    10,
    16,    22,    37,    38,    39,    42,    41,    44,    45,    49,
    50,    47,    48,    52,    53,    55,    57,    59,    61,    63,
    65,     0,     0,   206,   204,   139,   137,   138,     0,     0,
     0,   252,     0,   222,    69,    82,     0,    96,    94,   110,
   306,   114,     0,   118,     0,     0,     0,   263,   264,     0,
    31,     8,     0,   207,     0,   244,   243,   246,     0,   235,
     0,     0,     0,    97,     0,   111,   119,     0,   304,   299,
   297,   298,   294,     0,     0,     0,   293,   295,   296,     0,
     0,   315,     0,   316,   261,     0,    67,     0,     0,   245,
     0,     0,   234,   232,     0,     0,   223,     0,   112,     0,
   120,   301,     0,     0,   271,     0,     0,   314,   317,   262,
   265,   266,   208,     0,   247,     0,     0,     0,   225,   238,
   224,    98,   113,   303,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   248,   242,   233,   236,   302,   300,   321,
     0,     0,   318,     0,     0,   240,     0,     0,     0,     0,
   323,   322,   320,   319,     0,     0
};

static const short yydefgoto[] = {   142,
   143,   144,   337,   145,   146,   147,   148,   149,   150,   151,
   188,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   189,   190,   310,   191,   166,   192,   193,
    72,    73,    74,   117,    97,    98,   118,    75,    76,    77,
    78,   167,    80,    81,   108,   109,   170,   171,   332,   195,
   196,   197,   198,   298,   403,   460,   461,   199,   200,   201,
   434,   402,   202,   373,   290,   370,   398,   431,   432,   203,
    82,    83,    84,    91,   333,   390,   126,   236,   237,   238,
   416,   442,   418,   443,   419,   127,   128,   129,   334,   423,
   424
};

static const short yypact[] = {  2191,
    72,    31,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -59,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -30,-32768,-32768,-32768,-32768,
   -52,     6,    20,     4,    28,-32768,    62,  2665,-32768,    37,
-32768,  1183,-32768,-32768,-32768,-32768,    46,  2665,   164,-32768,
    54,    63,    66,-32768,-32768,-32768,-32768,  2665,   113,   102,
-32768,   -37,-32768,  1969,-32768,  2665,   108,  2297,-32768,    79,
    83,    87,   455,-32768,   147,-32768,-32768,-32768,   148,  2665,
   -84,-32768,  1523,    -3,   301,-32768,   103,   -69,   115,   122,
-32768,-32768,-32768,-32768,  1969,  1969,  1969,-32768,-32768,-32768,
-32768,-32768,-32768,   -45,-32768,-32768,-32768,   125,   -80,  2079,
   127,-32768,  1969,    49,   -19,    23,   -76,    91,   106,   109,
   111,   142,   143,   -85,-32768,   130,-32768,  2398,   -62,    30,
-32768,-32768,-32768,   159,   161,   162,   128,   129,-32768,   140,
   141,   132,  1636,   144,   138,-32768,-32768,    27,-32768,-32768,
    34,-32768,   -52,   145,-32768,-32768,-32768,-32768,   581,-32768,
-32768,-32768,-32768,-32768,   -83,-32768,-32768,  1746,   137,   -41,
   151,   155,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   330,-32768,   179,-32768,   187,
-32768,   103,  1289,-32768,-32768,   -79,    77,-32768,-32768,  1969,
  2581,-32768,-32768,  1969,   156,-32768,-32768,-32768,  1969,  1969,
  1969,  1969,  1969,  1969,  1969,  1969,  1969,  1969,  1969,  1969,
  1969,  1969,  1969,  1969,  1969,  1969,  1969,  1969,-32768,-32768,
  1969,   186,   108,-32768,   146,   150,   152,-32768,-32768,   707,
-32768,  1969,-32768,-32768,    36,-32768,-32768,   707,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1969,
  1969,-32768,-32768,-32768,  1969,    40,  1289,-32768,   -41,   157,
  1289,   153,   -41,   189,-32768,-32768,   154,-32768,   160,  1859,
-32768,-32768,-32768,-32768,-32768,  1969,   163,   165,-32768,   167,
-32768,-32768,-32768,-32768,-32768,    49,    49,   -19,   -19,    23,
    23,    23,    23,   -76,   -76,    91,   106,   109,   111,   142,
   143,    76,   171,-32768,-32768,-32768,-32768,-32768,   206,   959,
   -18,-32768,  1071,   707,-32768,-32768,   172,-32768,-32768,   168,
   -41,-32768,  1289,   169,   180,  2481,   -61,-32768,-32768,    42,
-32768,-32768,  1969,   175,   170,-32768,-32768,  1071,   707,   165,
   208,   184,   181,   182,  1289,   178,-32768,  1289,-32768,-32768,
-32768,-32768,-32768,    93,   188,   191,-32768,-32768,-32768,   190,
   193,-32768,   -55,-32768,-32768,  1399,-32768,   217,  1969,-32768,
   194,   197,   291,-32768,   218,   833,-32768,   231,-32768,  1289,
-32768,-32768,    68,    93,-32768,   -71,   -70,-32768,-32768,-32768,
-32768,-32768,-32768,   -10,  1969,   833,   707,  1289,-32768,-32768,
-32768,-32768,-32768,-32768,    93,     3,   219,   256,   258,   221,
   260,   261,   224,   165,-32768,-32768,-32768,-32768,-32768,-32768,
   249,   232,-32768,   251,   234,-32768,   244,   245,   247,   248,
-32768,-32768,-32768,-32768,   375,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,   126,-32768,-32768,-32768,-32768,
   -49,-32768,   -60,   -58,  -123,   -40,   104,   105,   107,   110,
   112,   114,-32768,   -86,  -144,-32768,  -136,  -119,     2,    12,
-32768,-32768,-32768,   259,   287,   283,   263,-32768,-32768,  -353,
   -44,     0,   250,-32768,   278,   -95,-32768,   117,  -293,    16,
  -190,  -410,-32768,-32768,-32768,   -67,   299,    94,    24,-32768,
-32768,    -5,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   313,-32768,-32768,  -325,-32768,  -117,-32768,   166,    10,
-32768,  -372,-32768,   -47,-32768,  -109,-32768,  -118,-32768,-32768,
   -22
};


#define	YYLAST		2752


static const short yytable[] = {    79,
   246,    70,   209,   211,   389,   256,     1,     2,   314,   239,
   241,    71,   173,   417,   467,   470,   277,   165,   242,   401,
   266,   267,   420,   379,   421,   459,    87,   382,   420,    99,
   421,   208,   315,    86,   253,   335,   165,   124,   316,   317,
   254,   311,   468,   471,   401,   459,   295,   125,    99,   248,
   249,   278,   240,   281,   152,   268,   269,   422,    88,   282,
   469,   472,   125,   448,    94,    95,    96,    50,     1,     2,
   250,    90,   173,   152,   251,    85,   122,   103,   123,   212,
   124,    79,   213,    70,   124,   244,   245,   107,   320,   407,
   125,   322,   478,    71,   125,   318,   399,   119,   331,   369,
   452,    89,   311,   258,   473,   107,   262,   107,   263,   342,
   311,   439,   194,   338,   441,   264,   265,   479,   -88,   119,
    92,   165,   212,   465,   328,   378,    94,    95,    96,    50,
   299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    93,   362,   350,   351,   352,   353,   463,   102,   100,   309,
   283,   101,   104,   284,   311,   371,   311,   312,   152,   372,
   425,   363,   426,   106,   477,   375,   376,   107,   110,   111,
   112,   113,   331,    94,    95,    96,   331,   259,   260,   261,
   410,   411,   412,   314,   115,   388,   464,   121,   465,   270,
   271,   336,   104,   169,   165,   377,   311,   393,   194,   174,
   380,   346,   347,   175,   384,   348,   349,   176,   433,   343,
   344,   345,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   165,   354,
   355,   152,   204,   205,   125,   -25,   400,   243,   331,   252,
   257,   272,   275,   273,   274,   276,   279,   285,   427,   286,
   287,   288,   289,   291,   292,   293,   297,   296,   -24,   321,
   331,   400,   406,   331,   327,   152,   476,   323,   324,   212,
   -19,   364,   395,   381,   385,   383,   386,   387,   366,   392,
   -26,   451,   367,   429,   368,   311,   391,   394,   404,   194,
   405,   408,   454,   435,   409,   331,   428,   194,   436,   437,
   440,   444,   453,   438,   457,   214,   215,   216,   217,   218,
   219,   456,   446,   331,   445,   447,   462,   455,   474,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
   231,   232,   233,   234,   214,   215,   216,   217,   218,   219,
   458,   481,   480,   482,   483,   484,   485,   486,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   487,   488,   489,   490,   491,   492,   194,
   493,   494,   194,   194,   496,   356,   341,   357,   206,   116,
   358,   120,   207,   168,   359,   396,   247,   360,   475,   114,
   361,   374,   430,   397,   105,   415,   466,   194,   194,   365,
   449,   326,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   235,     0,   194,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   194,   194,     1,     2,     3,
     4,     5,   325,     6,     7,   177,   178,   179,     0,   180,
   181,   182,   183,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,     0,     0,     0,    50,    51,
    52,   184,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,     0,     0,    67,     0,
   130,    68,   131,   132,   133,     0,   134,     0,     0,   135,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,     0,
     0,     0,   185,   186,     0,     0,     0,     0,   187,   138,
   139,   140,   141,     1,     2,     3,     4,     5,     0,     6,
     7,   177,   178,   179,     0,   180,   181,   182,   183,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,     0,     0,     0,    50,    51,    52,   184,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,     0,     0,    67,     0,   130,    68,   131,   132,
   133,     0,   134,     0,     0,   135,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,     0,     0,     0,   185,   313,
     0,     0,     0,     0,   187,   138,   139,   140,   141,     1,
     2,     3,     4,     5,     0,     6,     7,   177,   178,   179,
     0,   180,   181,   182,   183,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,     0,     0,     0,
    50,    51,    52,   184,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,     0,     0,
    67,     0,   130,    68,   131,   132,   133,     0,   134,     0,
     0,   135,   136,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,     0,     0,     0,   185,     0,     0,     0,     0,     0,
   187,   138,   139,   140,   141,     1,     2,     3,     4,     5,
     0,     6,     7,   177,   178,   179,     0,   180,   181,   182,
   183,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,     0,     0,     0,    50,    51,    52,   184,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,     0,     0,    67,     0,   130,    68,
   131,   132,   133,     0,   134,     0,     0,   135,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,     0,     0,     0,
   113,     0,     0,     0,     0,     0,   187,   138,   139,   140,
   141,     1,     2,     3,     4,     5,     0,     6,     7,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,     0,
     0,     0,    50,    51,    52,     0,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
     0,     0,    67,     0,   130,    68,   131,   132,   133,     0,
   134,     0,     0,   135,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     1,     2,     3,     4,     5,     0,     6,
     7,     0,   187,   138,   139,   140,   141,     0,     0,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,     0,     0,     0,    50,    51,    52,     0,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,     0,     0,    67,     0,   130,    68,   131,   132,
   133,     0,   134,     0,     0,   135,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   495,     0,   137,     1,     2,     3,     4,     5,
     0,     6,     7,     0,     0,   138,   139,   140,   141,     0,
     0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,     0,     0,     0,    50,    51,    52,     0,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,     0,     0,    67,     0,     0,    68,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     3,     4,     5,     0,     6,     7,     0,
     0,     0,     0,     0,     0,     0,    69,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,     0,
     0,     0,     0,    51,    52,     0,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
     0,     0,    67,   329,   130,    68,   131,   132,   133,     0,
   134,     0,     0,   135,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     3,     4,     5,   330,     6,     7,     0,
     0,     0,     0,   138,   139,   140,   141,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,     0,
     0,     0,     0,    51,    52,     0,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
     0,     0,    67,     0,   130,    68,   131,   132,   133,     0,
   134,     0,     0,   135,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     0,     0,     0,   330,   450,     0,     0,
     0,     0,     0,   138,   139,   140,   141,     3,     4,     5,
     0,     6,     7,     0,     0,     0,     0,     0,     0,     0,
     0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,     0,     0,     0,     0,    51,    52,     0,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,     0,     0,    67,     0,   130,    68,
   131,   132,   133,     0,   134,     0,     0,   135,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,     0,     0,   210,
     3,     4,     5,     0,     6,     7,     0,   138,   139,   140,
   141,     0,     0,     0,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,     0,     0,     0,     0,
    51,    52,     0,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,     0,     0,    67,
     0,   130,    68,   131,   132,   133,     0,   134,     0,     0,
   135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     3,     4,     5,     0,     6,     7,     0,     0,     0,   294,
   138,   139,   140,   141,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,     0,     0,     0,     0,
    51,    52,     0,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,     0,     0,    67,
     0,   130,    68,   131,   132,   133,     0,   134,     0,     0,
   135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,   319,     3,     4,     5,     0,     6,     7,     0,
   138,   139,   140,   141,     0,     0,     0,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,     0,
     0,     0,     0,    51,    52,     0,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
     0,     0,    67,     0,   130,    68,   131,   132,   133,     0,
   134,     0,     0,   135,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     3,     4,     5,   330,     6,     7,     0,
     0,     0,     0,   138,   139,   140,   141,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,     0,
     0,     0,     0,    51,    52,     0,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
     0,     0,    67,     0,   130,    68,   131,   132,   133,     0,
   134,     0,     0,   135,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     3,     4,     5,     0,     6,     7,     0,
     0,     0,     0,   138,   139,   140,   141,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,     0,
     0,     0,     0,    51,   255,     0,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
     0,     0,    67,     0,   130,    68,   131,   132,   133,     0,
   134,     0,     0,   135,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     1,     2,     3,     4,     5,     0,     6,
     7,     0,     0,   138,   139,   140,   141,     0,     0,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,     0,     0,     0,    50,    51,    52,     0,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,     0,     0,    67,     0,     0,    68,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     3,     4,     5,     0,     6,     7,     0,     0,     0,
     0,     0,     0,     0,    69,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,     0,     0,     0,
     0,    51,    52,     0,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,     0,     0,
    67,     0,     0,    68,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     3,     4,     5,     0,     6,     7,     0,     0,
     0,     0,     0,     0,     0,   172,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,     0,     0,
     0,     0,    51,    52,     0,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,     0,
     0,    67,     0,     0,    68,   214,   215,   216,   217,   218,
   219,     0,     0,     0,     0,     0,     0,     0,     0,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
   231,   232,   233,   234,     0,     0,   280,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   410,   411,
   412,   413,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     3,     4,     5,     0,     6,
     7,     0,     0,     0,     0,     0,     0,     0,   414,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,     0,     0,     0,     0,    51,    52,     0,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,     0,     0,    67,     0,   339,    68,     0,     3,
     4,     5,   340,     6,     7,     0,     0,     0,     0,     0,
     0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,     0,     0,     0,     0,    51,
    52,     0,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,     0,     0,    67,     0,
     0,    68
};

static const short yycheck[] = {     0,
   137,     0,   121,   123,   330,   150,     3,     4,   199,   127,
   128,     0,   108,   386,    86,    86,   102,   104,   128,   373,
    97,    98,    84,   317,    86,   436,    86,   321,    84,    74,
    86,   116,   116,     3,   115,   115,   123,   122,   122,   123,
   121,   121,   114,   114,   398,   456,   183,   132,    93,    95,
    96,   137,   122,   116,   104,   132,   133,   119,   118,   122,
   132,   132,   132,   119,    61,    62,    63,    64,     3,     4,
   116,   124,   168,   123,   120,     4,   114,    78,   116,    83,
   122,    82,    86,    82,   122,   135,   136,    88,   208,   383,
   132,   210,   465,    82,   132,   205,   115,    98,   243,   290,
   426,   132,   121,   153,   115,   106,   126,   108,   128,   254,
   121,   405,   113,   250,   408,    93,    94,   115,   115,   120,
   115,   208,    83,   121,   242,    86,    61,    62,    63,    64,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   121,   278,   266,   267,   268,   269,   440,    86,   121,   123,
   121,   124,   116,   124,   121,   292,   121,   124,   208,   124,
   119,   281,   121,   118,   458,   310,   311,   168,     5,     6,
     7,   118,   317,    61,    62,    63,   321,   129,   130,   131,
    88,    89,    90,   374,   122,   330,   119,    86,   121,    99,
   100,   115,   116,    86,   281,   315,   121,   122,   199,   121,
   319,   262,   263,   121,   323,   264,   265,   121,   399,   259,
   260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   315,   270,
   271,   281,    86,    86,   132,   114,   373,   123,   383,   115,
   114,   136,   101,   135,   134,   103,   117,    89,   393,    89,
    89,   124,   124,   114,   114,   124,   119,   114,   114,   123,
   405,   398,   381,   408,    86,   315,   457,   117,   114,    83,
   115,    86,    67,   117,    86,   123,   123,   118,   133,   117,
   114,   426,   133,   114,   133,   121,   336,   117,   117,   290,
   123,   123,   429,    86,   115,   440,   122,   298,   115,   119,
   123,   114,    86,   122,    14,     5,     6,     7,     8,     9,
    10,   115,   123,   458,   124,   123,    86,   124,   455,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,     5,     6,     7,     8,     9,    10,
   123,    86,   124,    86,   124,    86,    86,   124,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,   115,   133,   115,   133,   124,   124,   370,
   124,   124,   373,   374,     0,   272,   251,   273,   120,    93,
   274,    99,   120,   106,   275,   370,   137,   276,   456,    91,
   277,   298,   398,   370,    82,   386,   444,   398,   399,   283,
   423,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   133,    -1,   436,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   456,   457,     3,     4,     5,
     6,     7,   133,     9,    10,    11,    12,    13,    -1,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    -1,    -1,    84,    -1,
    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,    95,
    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
    -1,    -1,   118,   119,    -1,    -1,    -1,    -1,   124,   125,
   126,   127,   128,     3,     4,     5,     6,     7,    -1,     9,
    10,    11,    12,    13,    -1,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    -1,    -1,    84,    -1,    86,    87,    88,    89,
    90,    -1,    92,    -1,    -1,    95,    96,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,   118,   119,
    -1,    -1,    -1,    -1,   124,   125,   126,   127,   128,     3,
     4,     5,     6,     7,    -1,     9,    10,    11,    12,    13,
    -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    -1,    -1,
    84,    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,
    -1,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   114,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
   124,   125,   126,   127,   128,     3,     4,     5,     6,     7,
    -1,     9,    10,    11,    12,    13,    -1,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    84,    -1,    86,    87,
    88,    89,    90,    -1,    92,    -1,    -1,    95,    96,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,
   118,    -1,    -1,    -1,    -1,    -1,   124,   125,   126,   127,
   128,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    64,    65,    66,    -1,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    -1,    -1,    84,    -1,    86,    87,    88,    89,    90,    -1,
    92,    -1,    -1,    95,    96,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,     3,     4,     5,     6,     7,    -1,     9,
    10,    -1,   124,   125,   126,   127,   128,    -1,    -1,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    64,    65,    66,    -1,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    -1,    -1,    84,    -1,    86,    87,    88,    89,
    90,    -1,    92,    -1,    -1,    95,    96,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     0,    -1,   114,     3,     4,     5,     6,     7,
    -1,     9,    10,    -1,    -1,   125,   126,   127,   128,    -1,
    -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    64,    65,    66,    -1,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    84,    -1,    -1,    87,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     5,     6,     7,    -1,     9,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   124,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    65,    66,    -1,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
    92,    -1,    -1,    95,    96,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,     5,     6,     7,   118,     9,    10,    -1,
    -1,    -1,    -1,   125,   126,   127,   128,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    65,    66,    -1,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    -1,    -1,    84,    -1,    86,    87,    88,    89,    90,    -1,
    92,    -1,    -1,    95,    96,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,    -1,    -1,    -1,   118,   119,    -1,    -1,
    -1,    -1,    -1,   125,   126,   127,   128,     5,     6,     7,
    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,    -1,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    84,    -1,    86,    87,
    88,    89,    90,    -1,    92,    -1,    -1,    95,    96,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,   117,
     5,     6,     7,    -1,     9,    10,    -1,   125,   126,   127,
   128,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    65,    66,    -1,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    -1,    -1,    84,
    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,   124,
   125,   126,   127,   128,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    65,    66,    -1,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    -1,    -1,    84,
    -1,    86,    87,    88,    89,    90,    -1,    92,    -1,    -1,
    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
    -1,    -1,   117,     5,     6,     7,    -1,     9,    10,    -1,
   125,   126,   127,   128,    -1,    -1,    -1,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    65,    66,    -1,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    -1,    -1,    84,    -1,    86,    87,    88,    89,    90,    -1,
    92,    -1,    -1,    95,    96,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,     5,     6,     7,   118,     9,    10,    -1,
    -1,    -1,    -1,   125,   126,   127,   128,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    65,    66,    -1,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    -1,    -1,    84,    -1,    86,    87,    88,    89,    90,    -1,
    92,    -1,    -1,    95,    96,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,     5,     6,     7,    -1,     9,    10,    -1,
    -1,    -1,    -1,   125,   126,   127,   128,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    65,    66,    -1,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    -1,    -1,    84,    -1,    86,    87,    88,    89,    90,    -1,
    92,    -1,    -1,    95,    96,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,     3,     4,     5,     6,     7,    -1,     9,
    10,    -1,    -1,   125,   126,   127,   128,    -1,    -1,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    64,    65,    66,    -1,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    -1,    -1,    84,    -1,    -1,    87,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   124,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    65,    66,    -1,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    -1,    -1,
    84,    -1,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     5,     6,     7,    -1,     9,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   119,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    66,    -1,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    84,    -1,    -1,    87,     5,     6,     7,     8,     9,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    -1,    -1,   119,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     5,     6,     7,    -1,     9,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    -1,    -1,    84,    -1,    86,    87,    -1,     5,
     6,     7,    92,     9,    10,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,
    66,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    -1,    -1,    84,    -1,
    -1,    87
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not __GNUC__ */
#if HAVE_ALLOCA_H
#include <alloca.h>
#else /* not HAVE_ALLOCA_H */
#ifdef _AIX
 #pragma alloca
#else /* not _AIX */
char *alloca ();
#endif /* not _AIX */
#endif /* not HAVE_ALLOCA_H */
#endif /* not __GNUC__ */

extern void yyerror(char* s);

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if (defined (MSDOS) && !defined (__TURBOC__)) || defined (WIN32)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     size_t count;
{
  register char *f = from;
  register char *t = to;
  register size_t i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, size_t count)
{
  register char *f = from;
  register char *t = to;
  register size_t i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifndef YYPARSE_PARAM_DECL
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif 
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

extern YY_DECL;

int
yyparse(YYPARSE_PARAM_DECL YYPARSE_PARAM) {
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  size_t yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      size_t size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 182 "hlslang.y"
{
        // The symbol table search was done in the lexical phase
        const TSymbol* symbol = yyvsp[0].lex.symbol;
        const TVariable* variable;
        if (symbol == 0) {
            parseContext.error(yyvsp[0].lex.line, "undeclared identifier", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
            TType type(EbtFloat, EbpUndefined);
            TVariable* fakeVariable = new TVariable(yyvsp[0].lex.string, type);
            parseContext.symbolTable.insert(*fakeVariable);
            variable = fakeVariable;
        } else {
            // This identifier can only be a variable type symbol 
            if (! symbol->isVariable()) {
                parseContext.error(yyvsp[0].lex.line, "variable expected", yyvsp[0].lex.string->c_str(), "");
                parseContext.recover();
            }
            variable = static_cast<const TVariable*>(symbol);
        }

        // don't delete $1.string, it's used by error recovery, and the pool
        // pop will reclaim the memory
		
		if (variable->getType().getQualifier() == EvqConst && variable->constValue)
		{
			TIntermConstant* c = ir_add_constant(variable->getType(), yyvsp[0].lex.line);
			c->copyValuesFrom(*variable->constValue);
			yyval.interm.intermTypedNode = c;
		}
		else
		{
			TIntermSymbol* sym = ir_add_symbol(variable, yyvsp[0].lex.line);
			yyval.interm.intermTypedNode = sym;
		}
    ;
    break;}
case 2:
#line 220 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 3:
#line 223 "hlslang.y"
{
        TIntermConstant* constant = ir_add_constant(TType(EbtInt, EbpUndefined, EvqConst), yyvsp[0].lex.line);
		constant->setValue(yyvsp[0].lex.i);
		yyval.interm.intermTypedNode = constant;
    ;
    break;}
case 4:
#line 228 "hlslang.y"
{
        TIntermConstant* constant = ir_add_constant(TType(EbtFloat, EbpUndefined, EvqConst), yyvsp[0].lex.line);
		constant->setValue(yyvsp[0].lex.f);
		yyval.interm.intermTypedNode = constant;
    ;
    break;}
case 5:
#line 233 "hlslang.y"
{
        TIntermConstant* constant = ir_add_constant(TType(EbtBool, EbpUndefined, EvqConst), yyvsp[0].lex.line);
		constant->setValue(yyvsp[0].lex.b);
		yyval.interm.intermTypedNode = constant;
    ;
    break;}
case 6:
#line 238 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
    ;
    break;}
case 7:
#line 244 "hlslang.y"
{ 
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 8:
#line 247 "hlslang.y"
{
        if (!yyvsp[-3].interm.intermTypedNode) {
            parseContext.error(yyvsp[-2].lex.line, " left of '[' is null ", "expression", "");
            YYERROR;
        }
        if (!yyvsp[-3].interm.intermTypedNode->isArray() && !yyvsp[-3].interm.intermTypedNode->isMatrix() && !yyvsp[-3].interm.intermTypedNode->isVector()) {
            if (yyvsp[-3].interm.intermTypedNode->getAsSymbolNode())
                parseContext.error(yyvsp[-2].lex.line, " left of '[' is not of type array, matrix, or vector ", yyvsp[-3].interm.intermTypedNode->getAsSymbolNode()->getSymbol().c_str(), "");
            else
                parseContext.error(yyvsp[-2].lex.line, " left of '[' is not of type array, matrix, or vector ", "expression", "");
            parseContext.recover();
        }
		if (yyvsp[-1].interm.intermTypedNode->getQualifier() == EvqConst) {
			if ((yyvsp[-3].interm.intermTypedNode->isVector() || yyvsp[-3].interm.intermTypedNode->isMatrix()) && yyvsp[-3].interm.intermTypedNode->getType().getRowsCount() <= yyvsp[-1].interm.intermTypedNode->getAsConstant()->toInt() && !yyvsp[-3].interm.intermTypedNode->isArray() ) {
				parseContext.error(yyvsp[-2].lex.line, "", "[", "field selection out of range '%d'", yyvsp[-1].interm.intermTypedNode->getAsConstant()->toInt());
				parseContext.recover();
			} else {
				if (yyvsp[-3].interm.intermTypedNode->isArray()) {
					if (yyvsp[-3].interm.intermTypedNode->getType().getArraySize() == 0) {
						if (yyvsp[-3].interm.intermTypedNode->getType().getMaxArraySize() <= yyvsp[-1].interm.intermTypedNode->getAsConstant()->toInt()) {
							if (parseContext.arraySetMaxSize(yyvsp[-3].interm.intermTypedNode->getAsSymbolNode(), yyvsp[-3].interm.intermTypedNode->getTypePointer(), yyvsp[-1].interm.intermTypedNode->getAsConstant()->toInt(), true, yyvsp[-2].lex.line))
								parseContext.recover(); 
						} else {
							if (parseContext.arraySetMaxSize(yyvsp[-3].interm.intermTypedNode->getAsSymbolNode(), yyvsp[-3].interm.intermTypedNode->getTypePointer(), 0, false, yyvsp[-2].lex.line))
								parseContext.recover(); 
						}
					} else if ( yyvsp[-1].interm.intermTypedNode->getAsConstant()->toInt() >= yyvsp[-3].interm.intermTypedNode->getType().getArraySize()) {
						parseContext.error(yyvsp[-2].lex.line, "", "[", "array index out of range '%d'", yyvsp[-1].interm.intermTypedNode->getAsConstant()->toInt());
						parseContext.recover();
					}
				}
				yyval.interm.intermTypedNode = ir_add_index(EOpIndexDirect, yyvsp[-3].interm.intermTypedNode, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
			}
		} else {
			if (yyvsp[-3].interm.intermTypedNode->isArray() && yyvsp[-3].interm.intermTypedNode->getType().getArraySize() == 0) {
				parseContext.error(yyvsp[-2].lex.line, "", "[", "array must be redeclared with a size before being indexed with a variable");
				parseContext.recover();
			}
			
			yyval.interm.intermTypedNode = ir_add_index(EOpIndexIndirect, yyvsp[-3].interm.intermTypedNode, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
		}
        if (yyval.interm.intermTypedNode == 0) {
            TIntermConstant* constant = ir_add_constant(TType(EbtFloat, EbpUndefined, EvqConst), yyvsp[-2].lex.line);
			constant->setValue(0.f);
			yyval.interm.intermTypedNode = constant;
        } else if (yyvsp[-3].interm.intermTypedNode->isArray()) {
            if (yyvsp[-3].interm.intermTypedNode->getType().getStruct())
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getType().getStruct(), yyvsp[-3].interm.intermTypedNode->getType().getTypeName(), EbpUndefined, yyvsp[-3].interm.intermTypedNode->getLine()));
            else
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqTemporary, yyvsp[-3].interm.intermTypedNode->getColsCount(),yyvsp[-3].interm.intermTypedNode->getRowsCount(),  yyvsp[-3].interm.intermTypedNode->isMatrix()));
                
            if (yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)
                yyval.interm.intermTypedNode->getTypePointer()->changeQualifier(EvqConst);
        } else if (yyvsp[-3].interm.intermTypedNode->isMatrix() && yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)         
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqConst, 1, yyvsp[-3].interm.intermTypedNode->getColsCount()));
        else if (yyvsp[-3].interm.intermTypedNode->isMatrix())            
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqTemporary, 1, yyvsp[-3].interm.intermTypedNode->getColsCount()));
        else if (yyvsp[-3].interm.intermTypedNode->isVector() && yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)          
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqConst));
        else if (yyvsp[-3].interm.intermTypedNode->isVector())       
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), yyvsp[-3].interm.intermTypedNode->getPrecision(), EvqTemporary));
        else
            yyval.interm.intermTypedNode->setType(yyvsp[-3].interm.intermTypedNode->getType());
    ;
    break;}
case 9:
#line 311 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 10:
#line 314 "hlslang.y"
{
        if (!yyvsp[-2].interm.intermTypedNode) {
            parseContext.error(yyvsp[0].lex.line, "field selection on null object", ".", "");
            YYERROR;
        }
        if (yyvsp[-2].interm.intermTypedNode->isArray()) {
            parseContext.error(yyvsp[0].lex.line, "cannot apply dot operator to an array", ".", "");
            parseContext.recover();
        }

        if (yyvsp[-2].interm.intermTypedNode->isVector()) {
            TVectorFields fields;
            if (! parseContext.parseVectorFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getRowsCount(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

			yyval.interm.intermTypedNode = ir_add_vector_swizzle(fields, yyvsp[-2].interm.intermTypedNode, yyvsp[-1].lex.line, yyvsp[0].lex.line);
        } else if (yyvsp[-2].interm.intermTypedNode->isMatrix()) {
            TVectorFields fields;
            if (!parseContext.parseMatrixFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getColsCount(), yyvsp[-2].interm.intermTypedNode->getRowsCount(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

            TString vectorString = *yyvsp[0].lex.string;
            TIntermTyped* index = ir_add_swizzle(fields, yyvsp[0].lex.line);                
            yyval.interm.intermTypedNode = ir_add_index(EOpMatrixSwizzle, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(), yyvsp[-2].interm.intermTypedNode->getPrecision(), EvqTemporary, 1, fields.num));
                    
        } else if (yyvsp[-2].interm.intermTypedNode->getBasicType() == EbtStruct) {
            bool fieldFound = false;
            TTypeList* fields = yyvsp[-2].interm.intermTypedNode->getType().getStruct();
            if (fields == 0) {
                parseContext.error(yyvsp[-1].lex.line, "structure has no fields", "Internal Error", "");
                parseContext.recover();
                yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
            } else {
                unsigned int i;
                for (i = 0; i < fields->size(); ++i) {
                    if ((*fields)[i].type->getFieldName() == *yyvsp[0].lex.string) {
                        fieldFound = true;
                        break;
                    }
                }
                if (fieldFound) {
					TIntermConstant* index = ir_add_constant(TType(EbtInt, EbpUndefined, EvqConst), yyvsp[0].lex.line);
					index->setValue(i);
					yyval.interm.intermTypedNode = ir_add_index(EOpIndexDirectStruct, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);                
					yyval.interm.intermTypedNode->setType(*(*fields)[i].type);
                } else {
                    parseContext.error(yyvsp[-1].lex.line, " no such field in structure", yyvsp[0].lex.string->c_str(), "");
                    parseContext.recover();
                    yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                }
            }
        } else if (yyvsp[-2].interm.intermTypedNode->isScalar()) {

            // HLSL allows ".xxxx" field selection on single component floats.  Handle that here.
            TVectorFields fields;

            // Check to make sure only the "x" component is accessed.
            if (! parseContext.parseVectorFields(*yyvsp[0].lex.string, 1, fields, yyvsp[0].lex.line))
			{
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
				yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
            }
			else
			{
				// Create the appropriate constructor based on the number of ".x"'s there are in the selection field
				TString vectorString = *yyvsp[0].lex.string;
				TQualifier qualifier = yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst ? EvqConst : EvqTemporary;
				TType type(yyvsp[-2].interm.intermTypedNode->getBasicType(), yyvsp[-2].interm.intermTypedNode->getPrecision(), qualifier, 1, (int) vectorString.size());
				yyval.interm.intermTypedNode = parseContext.constructBuiltIn(&type, parseContext.getConstructorOp(type),
												   yyval.interm.intermTypedNode, yyvsp[-2].interm.intermTypedNode->getLine(), false);
			}
        } else {
            parseContext.error(yyvsp[-1].lex.line, " field selection requires structure, vector, or matrix on left hand side", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
        // don't delete $3.string, it's from the pool
    ;
    break;}
case 11:
#line 401 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[0].lex.line, "++", yyvsp[-1].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = ir_add_unary_math(EOpPostIncrement, yyvsp[-1].interm.intermTypedNode, yyvsp[0].lex.line, parseContext);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[0].lex.line, "++", yyvsp[-1].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
        }
    ;
    break;}
case 12:
#line 411 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[0].lex.line, "--", yyvsp[-1].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = ir_add_unary_math(EOpPostDecrement, yyvsp[-1].interm.intermTypedNode, yyvsp[0].lex.line, parseContext);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[0].lex.line, "--", yyvsp[-1].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
        }
    ;
    break;}
case 13:
#line 424 "hlslang.y"
{
        if (parseContext.scalarErrorCheck(yyvsp[0].interm.intermTypedNode, "[]"))
            parseContext.recover();
        TType type(EbtInt, EbpUndefined);
        yyval.interm.intermTypedNode = parseContext.constructBuiltIn(&type, EOpConstructInt, yyvsp[0].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode->getLine(), true);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.error(yyvsp[0].interm.intermTypedNode->getLine(), "cannot convert to index", "[]", "");
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 14:
#line 438 "hlslang.y"
{
        TFunction* fnCall = yyvsp[0].interm.function;
        TOperator op = fnCall->getBuiltInOp();

        if (op == EOpArrayLength) {
            if (yyvsp[0].interm.intermNode->getAsTyped() == 0 || yyvsp[0].interm.intermNode->getAsTyped()->getType().getArraySize() == 0) {
                parseContext.error(yyvsp[0].interm.line, "", fnCall->getName().c_str(), "array must be declared with a size before using this method");
                parseContext.recover();
            }

			TIntermConstant* constant = ir_add_constant(TType(EbtInt, EbpUndefined, EvqConst), yyvsp[0].interm.line);
			constant->setValue(yyvsp[0].interm.intermNode->getAsTyped()->getType().getArraySize());
            yyval.interm.intermTypedNode = constant;
        } else if (op != EOpNull) {
            //
            // Then this should be a constructor.
            // Don't go through the symbol table for constructors.
            // Their parameters will be verified algorithmically.
            //
            TType type(EbtVoid, EbpUndefined);  // use this to get the type back
            if (parseContext.constructorErrorCheck(yyvsp[0].interm.line, yyvsp[0].interm.intermNode, *fnCall, op, &type)) {
                yyval.interm.intermTypedNode = 0;
            } else {
                //
                // It's a constructor, of type 'type'.
                //
                yyval.interm.intermTypedNode = parseContext.addConstructor(yyvsp[0].interm.intermNode, &type, op, fnCall, yyvsp[0].interm.line);
            }

            if (yyval.interm.intermTypedNode == 0) {
                parseContext.recover();
                yyval.interm.intermTypedNode = ir_set_aggregate_op(0, op, yyvsp[0].interm.line);
				yyval.interm.intermTypedNode->setType(type);
            }
        } else {
            //
            // Not a constructor.  Find it in the symbol table.
            //
            const TFunction* fnCandidate;
            bool builtIn;
            fnCandidate = parseContext.findFunction(yyvsp[0].interm.line, fnCall, &builtIn);

            if ( fnCandidate && fnCandidate->getMangledName() != fnCall->getMangledName()) {
                //add constructors to arguments to ensure that they have proper types
                TIntermNode *temp = parseContext.promoteFunctionArguments( yyvsp[0].interm.intermNode,
                                      fnCandidate);
                if (temp)
                    yyvsp[0].interm.intermNode = temp;
                else {
                    parseContext.error( yyvsp[0].interm.intermNode->getLine(), " unable to suitably promote arguments to function",
                                        fnCandidate->getName().c_str(), "");
                    fnCandidate = 0;
                }
            }

            if (fnCandidate) {
                //
                // A declared function.  But, it might still map to a built-in
                // operation.
                //
                op = fnCandidate->getBuiltInOp();
                if (builtIn && op != EOpNull) {
                    //
                    // A function call mapped to a built-in operation.
                    //
                    if (fnCandidate->getParamCount() == 1) {
                        //
                        // Treat it like a built-in unary operator.
                        //
                        yyval.interm.intermTypedNode = ir_add_unary_math(op, yyvsp[0].interm.intermNode, gNullSourceLoc, parseContext);
                        if (yyval.interm.intermTypedNode == 0)  {
                            parseContext.error(yyvsp[0].interm.intermNode->getLine(), " wrong operand type", "Internal Error",
                                "built in unary operator function.  Type: %s",
                                static_cast<TIntermTyped*>(yyvsp[0].interm.intermNode)->getCompleteString().c_str());
                            YYERROR;
                        }
                    } else {
                        yyval.interm.intermTypedNode = ir_set_aggregate_op(yyvsp[0].interm.intermAggregate, op, yyvsp[0].interm.line);
						yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());
                    }
                } else {
                    // This is a real function call
                    
                    yyval.interm.intermTypedNode = ir_set_aggregate_op(yyvsp[0].interm.intermAggregate, EOpFunctionCall, yyvsp[0].interm.line);
                    yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());                   
                    
                    yyval.interm.intermTypedNode->getAsAggregate()->setName(fnCandidate->getMangledName());
                    yyval.interm.intermTypedNode->getAsAggregate()->setPlainName(fnCandidate->getName());

                    TQualifier qual;
                    for (int i = 0; i < fnCandidate->getParamCount(); ++i) {
                        qual = (*fnCandidate)[i].type->getQualifier();
                        if (qual == EvqOut || qual == EvqInOut) {
                            if (parseContext.lValueErrorCheck(yyval.interm.intermTypedNode->getLine(), "assign", yyval.interm.intermTypedNode->getAsAggregate()->getNodes()[i]->getAsTyped())) {
                                parseContext.error(yyvsp[0].interm.intermNode->getLine(), "Constant value cannot be passed for 'out' or 'inout' parameters.", "Error", "");
                                parseContext.recover();
                            }
                        }
                    }
                }
                yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());
            } else {
                // error message was put out by PaFindFunction()
                // Put on a dummy node for error recovery
                
				TIntermConstant* constant = ir_add_constant(TType(EbtFloat, EbpUndefined, EvqConst), yyvsp[0].interm.line);
				constant->setValue(0.f);
				yyval.interm.intermTypedNode = constant;
                parseContext.recover();
            }
        }
        delete fnCall;
    ;
    break;}
case 15:
#line 554 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
    ;
    break;}
case 16:
#line 557 "hlslang.y"
{
        if (yyvsp[-2].interm.intermTypedNode->isArray() && yyvsp[0].interm.function->getName() == "length") {
            //
            // implement array.length()
            //
            yyval.interm = yyvsp[0].interm;
            yyval.interm.intermNode = yyvsp[-2].interm.intermTypedNode;
            yyval.interm.function->relateToOperator(EOpArrayLength);

        } else {
            parseContext.error(yyvsp[0].interm.line, "methods are not supported", "", "");
            parseContext.recover();
            yyval.interm = yyvsp[0].interm;
        }
    ;
    break;}
case 17:
#line 575 "hlslang.y"
{
        yyval.interm = yyvsp[-1].interm;
        yyval.interm.line = yyvsp[0].lex.line;
    ;
    break;}
case 18:
#line 579 "hlslang.y"
{
        yyval.interm = yyvsp[-1].interm;
        yyval.interm.line = yyvsp[0].lex.line;
    ;
    break;}
case 19:
#line 586 "hlslang.y"
{
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.intermNode = 0;
    ;
    break;}
case 20:
#line 590 "hlslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
        yyval.interm.intermNode = 0;
    ;
    break;}
case 21:
#line 597 "hlslang.y"
{
		if (!yyvsp[0].interm.intermTypedNode) {
          YYERROR;
		}
		TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        yyvsp[-1].interm.function->addParameter(param);
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.intermNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 22:
#line 606 "hlslang.y"
{
		if (!yyvsp[0].interm.intermTypedNode) {
          YYERROR;
		}
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        yyvsp[-2].interm.function->addParameter(param);
        yyval.interm.function = yyvsp[-2].interm.function;
        yyval.interm.intermNode = ir_grow_aggregate(yyvsp[-2].interm.intermNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line);
    ;
    break;}
case 23:
#line 618 "hlslang.y"
{
        yyval.interm.function = yyvsp[-1].interm.function;
    ;
    break;}
case 24:
#line 626 "hlslang.y"
{
        //
        // Constructor
        //
        if (yyvsp[0].interm.type.array) {
            //TODO : figure out how to deal with array constructors
        }

        if (yyvsp[0].interm.type.userDef) {
            TString tempString = "";
            TType type(yyvsp[0].interm.type);
            TFunction *function = new TFunction(&tempString, type, EOpConstructStruct);
            yyval.interm.function = function;
        } else {
            TOperator op = ir_get_constructor_op(yyvsp[0].interm.type, parseContext, false);
            if (op == EOpNull) {
                parseContext.error(yyvsp[0].interm.type.line, "cannot construct this type", TType::getBasicString(yyvsp[0].interm.type.type), "");
                parseContext.recover();
                yyvsp[0].interm.type.type = EbtFloat;
                op = EOpConstructFloat;
            }
            TString tempString = "";
            TType type(yyvsp[0].interm.type);
            TFunction *function = new TFunction(&tempString, type, op);
            yyval.interm.function = function;
        }
    ;
    break;}
case 25:
#line 653 "hlslang.y"
{
		if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string)) 
			parseContext.recover();
		TType type(EbtVoid, EbpUndefined);
		const TString *mangled;
		if ( *yyvsp[0].lex.string == "main")
			mangled = NewPoolTString("xlat_main");
		else
			mangled = yyvsp[0].lex.string;
		TFunction *function = new TFunction( mangled, type);
		yyval.interm.function = function;
	;
    break;}
case 26:
#line 665 "hlslang.y"
{
		if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string)) 
			parseContext.recover();
		TType type(EbtVoid, EbpUndefined);
		TFunction *function = new TFunction(yyvsp[0].lex.string, type);
		yyval.interm.function = function;
    ;
    break;}
case 27:
#line 675 "hlslang.y"
{
		yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 28:
#line 678 "hlslang.y"
{
		if (parseContext.lValueErrorCheck(yyvsp[-1].lex.line, "++", yyvsp[0].interm.intermTypedNode))
			parseContext.recover();
		yyval.interm.intermTypedNode = ir_add_unary_math(EOpPreIncrement, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext);
		if (yyval.interm.intermTypedNode == 0) {
			parseContext.unaryOpError(yyvsp[-1].lex.line, "++", yyvsp[0].interm.intermTypedNode->getCompleteString());
			parseContext.recover();
			yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
		}
    ;
    break;}
case 29:
#line 688 "hlslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[-1].lex.line, "--", yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
		yyval.interm.intermTypedNode = ir_add_unary_math(EOpPreDecrement, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext);
		if (yyval.interm.intermTypedNode == 0) {
			parseContext.unaryOpError(yyvsp[-1].lex.line, "--", yyvsp[0].interm.intermTypedNode->getCompleteString());
			parseContext.recover();
			yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
		}
    ;
    break;}
case 30:
#line 698 "hlslang.y"
{
		if (yyvsp[-1].interm.op != EOpNull) {
			yyval.interm.intermTypedNode = ir_add_unary_math(yyvsp[-1].interm.op, yyvsp[0].interm.intermTypedNode, yyvsp[-1].interm.line, parseContext);
			if (yyval.interm.intermTypedNode == 0) {
				const char* errorOp = "";
				switch(yyvsp[-1].interm.op) {
					case EOpNegative:   errorOp = "-"; break;
					case EOpLogicalNot: errorOp = "!"; break;
					case EOpBitwiseNot: errorOp = "~"; break;
					default: break;
				}
				parseContext.unaryOpError(yyvsp[-1].interm.line, errorOp, yyvsp[0].interm.intermTypedNode->getCompleteString());
				parseContext.recover();
				yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
			}
		} else
			yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 31:
#line 716 "hlslang.y"
{
        // cast operator, insert constructor
        TOperator op = ir_get_constructor_op(yyvsp[-2].interm.type, parseContext, true);
        if (op == EOpNull) {
            parseContext.error(yyvsp[-2].interm.type.line, "cannot cast this type", TType::getBasicString(yyvsp[-2].interm.type.type), "");
            parseContext.recover();
            yyvsp[-2].interm.type.type = EbtFloat;
            op = EOpConstructFloat;
        }
        TString tempString = "";
        TType type(yyvsp[-2].interm.type);
        TFunction *function = new TFunction(&tempString, type, op);
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        function->addParameter(param);
        TType type2(EbtVoid, EbpUndefined);  // use this to get the type back
        if (parseContext.constructorErrorCheck(yyvsp[-2].interm.type.line, yyvsp[0].interm.intermTypedNode, *function, op, &type2)) {
            yyval.interm.intermTypedNode = 0;
        } else {
            //
            // It's a constructor, of type 'type'.
            //
            yyval.interm.intermTypedNode = parseContext.addConstructor(yyvsp[0].interm.intermTypedNode, &type2, op, function, yyvsp[-2].interm.type.line);
        }

        if (yyval.interm.intermTypedNode == 0) {
            parseContext.recover();
            yyval.interm.intermTypedNode = ir_set_aggregate_op(0, op, yyvsp[-2].interm.type.line);
        } else {
			yyval.interm.intermTypedNode->setType(type2);
		}
	;
    break;}
case 32:
#line 751 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpNull; ;
    break;}
case 33:
#line 752 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpNegative; ;
    break;}
case 34:
#line 753 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpLogicalNot; ;
    break;}
case 35:
#line 754 "hlslang.y"
{ UNSUPPORTED_FEATURE("~", yyvsp[0].lex.line);
              yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpBitwiseNot; ;
    break;}
case 36:
#line 760 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 37:
#line 761 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpMul, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "*", false); ;
    break;}
case 38:
#line 762 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpDiv, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "/", false); ;
    break;}
case 39:
#line 763 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpMod, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "%", false); ;
    break;}
case 40:
#line 767 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 41:
#line 768 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpAdd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "+", false); ;
    break;}
case 42:
#line 769 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpSub, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "-", false); ;
    break;}
case 43:
#line 773 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 44:
#line 774 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpLeftShift, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "<<", false); ;
    break;}
case 45:
#line 775 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpRightShift, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, ">>", false); ;
    break;}
case 46:
#line 779 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 47:
#line 780 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpLessThan, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "<", true); ;
    break;}
case 48:
#line 781 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpGreaterThan, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, ">", true); ;
    break;}
case 49:
#line 782 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpLessThanEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "<=", true); ;
    break;}
case 50:
#line 783 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpGreaterThanEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, ">=", true); ;
    break;}
case 51:
#line 787 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 52:
#line 788 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "==", true); ;
    break;}
case 53:
#line 789 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpNotEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "!=", true); ;
    break;}
case 54:
#line 793 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 55:
#line 794 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpAnd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "&", false); ;
    break;}
case 56:
#line 798 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 57:
#line 799 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpExclusiveOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "^", false); ;
    break;}
case 58:
#line 803 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 59:
#line 804 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpInclusiveOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "|", false); ;
    break;}
case 60:
#line 808 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 61:
#line 809 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpLogicalAnd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "&&", true); ;
    break;}
case 62:
#line 813 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 63:
#line 814 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpLogicalXor, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "^^", true); ;
    break;}
case 64:
#line 818 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 65:
#line 819 "hlslang.y"
{ yyval.interm.intermTypedNode = parseContext.add_binary(EOpLogicalOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, "||", true); ;
    break;}
case 66:
#line 823 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 67:
#line 824 "hlslang.y"
{
       if (parseContext.boolOrVectorErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.intermTypedNode))
            parseContext.recover();
       
		yyval.interm.intermTypedNode = ir_add_selection(yyvsp[-4].interm.intermTypedNode, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-3].lex.line, parseContext.infoSink);
           
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-3].lex.line, ":", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 68:
#line 839 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 69:
#line 840 "hlslang.y"
{        
        if (parseContext.lValueErrorCheck(yyvsp[-1].interm.line, "assign", yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.addAssign(yyvsp[-1].interm.op, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].interm.line);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.assignError(yyvsp[-1].interm.line, "assign", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()))
            parseContext.recover();
    ;
    break;}
case 70:
#line 854 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAssign; ;
    break;}
case 71:
#line 855 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpMulAssign; ;
    break;}
case 72:
#line 856 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpDivAssign; ;
    break;}
case 73:
#line 857 "hlslang.y"
{ UNSUPPORTED_FEATURE("%=", yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpModAssign; ;
    break;}
case 74:
#line 858 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAddAssign; ;
    break;}
case 75:
#line 859 "hlslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpSubAssign; ;
    break;}
case 76:
#line 860 "hlslang.y"
{ UNSUPPORTED_FEATURE("<<=", yyvsp[0].lex.line); yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpLeftShiftAssign; ;
    break;}
case 77:
#line 861 "hlslang.y"
{ UNSUPPORTED_FEATURE("<<=", yyvsp[0].lex.line); yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpRightShiftAssign; ;
    break;}
case 78:
#line 862 "hlslang.y"
{ UNSUPPORTED_FEATURE("&=",  yyvsp[0].lex.line); yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAndAssign; ;
    break;}
case 79:
#line 863 "hlslang.y"
{ UNSUPPORTED_FEATURE("^=",  yyvsp[0].lex.line); yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpExclusiveOrAssign; ;
    break;}
case 80:
#line 864 "hlslang.y"
{ UNSUPPORTED_FEATURE("|=",  yyvsp[0].lex.line); yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpInclusiveOrAssign; ;
    break;}
case 81:
#line 868 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 82:
#line 871 "hlslang.y"
{
        yyval.interm.intermTypedNode = ir_add_comma(yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ",", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 83:
#line 882 "hlslang.y"
{
        if (parseContext.constErrorCheck(yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 84:
#line 890 "hlslang.y"
{ yyval.interm.intermDeclaration = 0; ;
    break;}
case 85:
#line 891 "hlslang.y"
{ yyval.interm.intermDeclaration = yyvsp[-1].interm.intermDeclaration; ;
    break;}
case 86:
#line 895 "hlslang.y"
{
        //
        // Multiple declarations of the same function are allowed.
        //
        // If this is a definition, the definition production code will check for redefinitions
        // (we don't know at this point if it's a definition or not).
        //
        // Redeclarations are allowed.  But, return types and parameter qualifiers must match.
        //
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(yyvsp[-1].interm.function->getMangledName()));
        if (prevDec) {
            if (prevDec->getReturnType() != yyvsp[-1].interm.function->getReturnType()) {
                parseContext.error(yyvsp[0].lex.line, "overloaded functions must have the same return type", yyvsp[-1].interm.function->getReturnType().getBasicString(), "");
                parseContext.recover();
            }
            for (int i = 0; i < prevDec->getParamCount(); ++i) {
                if ((*prevDec)[i].type->getQualifier() != (*yyvsp[-1].interm.function)[i].type->getQualifier()) {
                    parseContext.error(yyvsp[0].lex.line, "overloaded functions must have the same parameter qualifiers", (*yyvsp[-1].interm.function)[i].type->getQualifierString(), "");
                    parseContext.recover();
                }
            }
        }

        //
        // If this is a redeclaration, it could also be a definition,
        // in which case, we want to use the variable names from this one, and not the one that's
        // being redeclared.  So, pass back up this declaration, not the one in the symbol table.
        //
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.line = yyvsp[0].lex.line;

        parseContext.symbolTable.insert(*yyval.interm.function);
    ;
    break;}
case 87:
#line 928 "hlslang.y"
{
        //
        // Multiple declarations of the same function are allowed.
        //
        // If this is a definition, the definition production code will check for redefinitions
        // (we don't know at this point if it's a definition or not).
        //
        // Redeclarations are allowed.  But, return types and parameter qualifiers must match.
        //
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(yyvsp[-3].interm.function->getMangledName()));
        if (prevDec) {
            if (prevDec->getReturnType() != yyvsp[-3].interm.function->getReturnType()) {
                parseContext.error(yyvsp[-2].lex.line, "overloaded functions must have the same return type", yyvsp[-3].interm.function->getReturnType().getBasicString(), "");
                parseContext.recover();
            }
            for (int i = 0; i < prevDec->getParamCount(); ++i) {
                if ((*prevDec)[i].type->getQualifier() != (*yyvsp[-3].interm.function)[i].type->getQualifier()) {
                    parseContext.error(yyvsp[-2].lex.line, "overloaded functions must have the same parameter qualifiers", (*yyvsp[-3].interm.function)[i].type->getQualifierString(), "");
                    parseContext.recover();
                }
            }
        }

        //
        // If this is a redeclaration, it could also be a definition,
        // in which case, we want to use the variable names from this one, and not the one that's
        // being redeclared.  So, pass back up this declaration, not the one in the symbol table.
        //
        yyval.interm.function = yyvsp[-3].interm.function;
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.function->setInfo(new TTypeInfo(*yyvsp[0].lex.string, 0));

        parseContext.symbolTable.insert(*yyval.interm.function);
    ;
    break;}
case 88:
#line 965 "hlslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
    ;
    break;}
case 89:
#line 968 "hlslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
    ;
    break;}
case 90:
#line 975 "hlslang.y"
{
        // Add the parameter
        yyval.interm.function = yyvsp[-1].interm.function;
        if (yyvsp[0].interm.param.type->getBasicType() != EbtVoid)
            yyvsp[-1].interm.function->addParameter(yyvsp[0].interm.param);
        else
            delete yyvsp[0].interm.param.type;
    ;
    break;}
case 91:
#line 983 "hlslang.y"
{
        //
        // Only first parameter of one-parameter functions can be void
        // The check for named parameters not being void is done in parameter_declarator
        //
        if (yyvsp[0].interm.param.type->getBasicType() == EbtVoid) {
            //
            // This parameter > first is void
            //
            parseContext.error(yyvsp[-1].lex.line, "cannot be an argument type except for '(void)'", "void", "");
            parseContext.recover();
            delete yyvsp[0].interm.param.type;
        } else {
            // Add the parameter
            yyval.interm.function = yyvsp[-2].interm.function;
            yyvsp[-2].interm.function->addParameter(yyvsp[0].interm.param);
        }
    ;
    break;}
case 92:
#line 1004 "hlslang.y"
{
        if (yyvsp[-2].interm.type.qualifier != EvqGlobal && yyvsp[-2].interm.type.qualifier != EvqTemporary) {
			if (yyvsp[-2].interm.type.qualifier == EvqConst || yyvsp[-2].interm.type.qualifier == EvqStatic)
			{
				yyvsp[-2].interm.type.qualifier = EvqTemporary;
			}
			else
			{
				parseContext.error(yyvsp[-1].lex.line, "no qualifiers allowed for function return", getQualifierString(yyvsp[-2].interm.type.qualifier), "");
				parseContext.recover();
			}
        }
        // make sure a sampler is not involved as well...
        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyvsp[-2].interm.type))
            parseContext.recover();

        // Add the function as a prototype after parsing it (we do not support recursion)
        TFunction *function;
        TType type(yyvsp[-2].interm.type);
    const TString* mangled = 0;
    if ( *yyvsp[-1].lex.string == "main")
        mangled = NewPoolTString( "xlat_main");
    else
        mangled = yyvsp[-1].lex.string;

        function = new TFunction(mangled, type);
        yyval.interm.function = function;
    ;
    break;}
case 93:
#line 1036 "hlslang.y"
{
        if (yyvsp[-1].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[0].lex.line, "illegal use of type 'void'", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[0].lex.string, 0, new TType(yyvsp[-1].interm.type)};
        yyval.interm.line = yyvsp[0].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 94:
#line 1047 "hlslang.y"
{
        if (yyvsp[-3].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "illegal use of type 'void'", yyvsp[-2].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[-2].lex.line, *yyvsp[-2].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[-2].lex.string, 0, new TType(yyvsp[-3].interm.type)};
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.param = param;

        //TODO: add initializer support
    ;
    break;}
case 95:
#line 1060 "hlslang.y"
{
        // register is being ignored
        if (yyvsp[-2].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[-1].lex.line, "illegal use of type 'void'", yyvsp[-1].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[-1].lex.string, 0, new TType(yyvsp[-2].interm.type)};
        yyval.interm.line = yyvsp[-1].lex.line;
        yyval.interm.param = param; 
    ;
    break;}
case 96:
#line 1072 "hlslang.y"
{
        //Parameter with semantic
        if (yyvsp[-3].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "illegal use of type 'void'", yyvsp[-2].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[-2].lex.line, *yyvsp[-2].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[-2].lex.string, new TTypeInfo(*yyvsp[0].lex.string, 0), new TType(yyvsp[-3].interm.type)};
        yyval.interm.line = yyvsp[-2].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 97:
#line 1084 "hlslang.y"
{
        // Check that we can make an array out of this type
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();

        if (parseContext.reservedErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string))
            parseContext.recover();

        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
            parseContext.recover();
        yyvsp[-4].interm.type.setArray(true, size);

        TType* type = new TType(yyvsp[-4].interm.type);
        TParameter param = { yyvsp[-3].lex.string, 0, type };
        yyval.interm.line = yyvsp[-3].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 98:
#line 1102 "hlslang.y"
{
        // Check that we can make an array out of this type
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();

        if (parseContext.reservedErrorCheck(yyvsp[-5].lex.line, *yyvsp[-5].lex.string))
            parseContext.recover();

        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-4].lex.line, yyvsp[-3].interm.intermTypedNode, size))
            parseContext.recover();
        yyvsp[-6].interm.type.setArray(true, size);

        TType* type = new TType(yyvsp[-6].interm.type);
        TParameter param = { yyvsp[-5].lex.string, new TTypeInfo(*yyvsp[0].lex.string, 0), type };
        yyval.interm.line = yyvsp[-5].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 99:
#line 1131 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, yyvsp[-2].interm.type.qualifier, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 100:
#line 1136 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.parameterSamplerErrorCheck(yyvsp[0].interm.line, yyvsp[-1].interm.qualifier, *yyvsp[0].interm.param.type))
            parseContext.recover();
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, EvqTemporary, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 101:
#line 1146 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, yyvsp[-2].interm.type.qualifier, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 102:
#line 1151 "hlslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.parameterSamplerErrorCheck(yyvsp[0].interm.line, yyvsp[-1].interm.qualifier, *yyvsp[0].interm.param.type))
            parseContext.recover();
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, EvqTemporary, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 103:
#line 1161 "hlslang.y"
{
        yyval.interm.qualifier = EvqIn;
    ;
    break;}
case 104:
#line 1164 "hlslang.y"
{
        yyval.interm.qualifier = EvqIn;
    ;
    break;}
case 105:
#line 1167 "hlslang.y"
{
        yyval.interm.qualifier = EvqOut;
    ;
    break;}
case 106:
#line 1170 "hlslang.y"
{
        yyval.interm.qualifier = EvqInOut;
    ;
    break;}
case 107:
#line 1176 "hlslang.y"
{
        TParameter param = { 0, 0, new TType(yyvsp[0].interm.type) };
        yyval.interm.param = param;
    ;
    break;}
case 108:
#line 1183 "hlslang.y"
{
        yyval.interm.intermDeclaration = yyvsp[0].interm.intermDeclaration;
    ;
    break;}
case 109:
#line 1186 "hlslang.y"
{
		TPublicType type = ir_get_decl_type_noarray(yyvsp[-3].interm.intermDeclaration);
		
        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, type))
            parseContext.recover();
        
        if (parseContext.nonInitConstErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, type))
            parseContext.recover();

        if (parseContext.nonInitErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyvsp[0].interm.typeInfo, type))
            parseContext.recover();
		
		TSymbol* sym = parseContext.symbolTable.find(*yyvsp[-1].lex.string);
		if (!sym)
			yyval.interm.intermDeclaration = yyvsp[-3].interm.intermDeclaration;
		else
			yyval.interm.intermDeclaration = ir_grow_declaration(yyvsp[-3].interm.intermDeclaration, sym, NULL, parseContext);
    ;
    break;}
case 110:
#line 1204 "hlslang.y"
{
		TPublicType type = ir_get_decl_type_noarray(yyvsp[-5].interm.intermDeclaration);
		
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, type))
            parseContext.recover();
            
        if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, type))
            parseContext.recover();
        
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, type) || parseContext.arrayQualifierErrorCheck(yyvsp[-2].lex.line, type))
            parseContext.recover();
        else {
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-2].lex.line, *yyvsp[-3].lex.string, yyvsp[0].interm.typeInfo, type, variable))
                parseContext.recover();
		
			if (!variable)
				yyval.interm.intermDeclaration = yyvsp[-5].interm.intermDeclaration;
			else {
				variable->getType().setArray(true);
				yyval.interm.intermDeclaration = ir_grow_declaration(yyvsp[-5].interm.intermDeclaration, variable, NULL, parseContext);
			}
        }
    ;
    break;}
case 111:
#line 1228 "hlslang.y"
{
		TPublicType type = ir_get_decl_type_noarray(yyvsp[-6].interm.intermDeclaration);
		
        if (parseContext.structQualifierErrorCheck(yyvsp[-4].lex.line, type))
            parseContext.recover();
            
        if (parseContext.nonInitConstErrorCheck(yyvsp[-4].lex.line, *yyvsp[-4].lex.string, type))
            parseContext.recover();

        if (parseContext.arrayTypeErrorCheck(yyvsp[-3].lex.line, type) || parseContext.arrayQualifierErrorCheck(yyvsp[-3].lex.line, type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-3].lex.line, yyvsp[-2].interm.intermTypedNode, size))
                parseContext.recover();
            type.setArray(true, size);
			
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-3].lex.line, *yyvsp[-4].lex.string, yyvsp[0].interm.typeInfo, type, variable))
                parseContext.recover();
			
			if (!variable)
				yyval.interm.intermDeclaration = yyvsp[-6].interm.intermDeclaration;
			else {
				yyval.interm.intermDeclaration = ir_grow_declaration(yyvsp[-6].interm.intermDeclaration, variable, NULL, parseContext);
			}
        }
    ;
    break;}
case 112:
#line 1256 "hlslang.y"
{
		TPublicType type = ir_get_decl_type_noarray(yyvsp[-7].interm.intermDeclaration);
		
        if (parseContext.structQualifierErrorCheck(yyvsp[-5].lex.line, type))
            parseContext.recover();
            
        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, type) || parseContext.arrayQualifierErrorCheck(yyvsp[-4].lex.line, type))
            parseContext.recover();
        else if (parseContext.arrayErrorCheck(yyvsp[-4].lex.line, *yyvsp[-5].lex.string, type, variable))
			parseContext.recover();
		
        {
            TIntermSymbol* symbol;
            type.setArray(true, yyvsp[0].interm.intermTypedNode->getType().getArraySize());
            if (!parseContext.executeInitializer(yyvsp[-5].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, type, yyvsp[0].interm.intermTypedNode, symbol, variable)) {
                if (!variable)
					yyval.interm.intermDeclaration = yyvsp[-7].interm.intermDeclaration;
				else {
					yyval.interm.intermDeclaration = ir_grow_declaration(yyvsp[-7].interm.intermDeclaration, variable, yyvsp[0].interm.intermTypedNode, parseContext);
				}
            } else {
                parseContext.recover();
                yyval.interm.intermDeclaration = 0;
            }
        }
    ;
    break;}
case 113:
#line 1283 "hlslang.y"
{
		TPublicType type = ir_get_decl_type_noarray(yyvsp[-8].interm.intermDeclaration);
		int array_size;
		
        if (parseContext.structQualifierErrorCheck(yyvsp[-6].lex.line, type))
            parseContext.recover();
            
        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-5].lex.line, type) || parseContext.arrayQualifierErrorCheck(yyvsp[-5].lex.line, type))
            parseContext.recover();
        else {
            if (parseContext.arraySizeErrorCheck(yyvsp[-5].lex.line, yyvsp[-4].interm.intermTypedNode, array_size))
                parseContext.recover();
			
            type.setArray(true, array_size);
            if (parseContext.arrayErrorCheck(yyvsp[-5].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, type, variable))
                parseContext.recover();
        }

        {
            TIntermSymbol* symbol;
            if (!parseContext.executeInitializer(yyvsp[-6].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, type, yyvsp[0].interm.intermTypedNode, symbol, variable)) {
				if (!variable)
					yyval.interm.intermDeclaration = yyvsp[-8].interm.intermDeclaration;
				else {
					yyval.interm.intermDeclaration = ir_grow_declaration(yyvsp[-8].interm.intermDeclaration, variable, yyvsp[0].interm.intermTypedNode, parseContext);
				}
            } else {
                parseContext.recover();
                yyval.interm.intermDeclaration = 0;
            }
        }
    ;
    break;}
case 114:
#line 1316 "hlslang.y"
{
		TPublicType type = ir_get_decl_type_noarray(yyvsp[-5].interm.intermDeclaration);
		
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, type))
            parseContext.recover();
			
        TIntermSymbol* symbol;
		if ( !IsSampler(type.type)) {
			if (!parseContext.executeInitializer(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, type, yyvsp[0].interm.intermTypedNode, symbol)) {
				TSymbol* variable = parseContext.symbolTable.find(*yyvsp[-3].lex.string);
				if (!variable)
					yyval.interm.intermDeclaration = yyvsp[-5].interm.intermDeclaration;
				else 				
					yyval.interm.intermDeclaration = ir_grow_declaration(yyvsp[-5].interm.intermDeclaration, variable, yyvsp[0].interm.intermTypedNode, parseContext);
			} else {
				parseContext.recover();
				yyval.interm.intermDeclaration = 0;
			}
		} else {
			//Special code to skip initializers for samplers
			yyval.interm.intermDeclaration = yyvsp[-5].interm.intermDeclaration;
			if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, type))
				parseContext.recover();
			
			if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, type))
				parseContext.recover();
			
			if (parseContext.nonInitErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, type))
				parseContext.recover();
		}
	;
    break;}
case 115:
#line 1350 "hlslang.y"
{
		yyval.interm.intermDeclaration = 0;
    ;
    break;}
case 116:
#line 1353 "hlslang.y"
{				
		bool error = false;
        if (error &= parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyvsp[-2].interm.type))
            parseContext.recover();
        
        if (error &= parseContext.nonInitConstErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyvsp[-2].interm.type))
            parseContext.recover();

        if (error &= parseContext.nonInitErrorCheck(yyvsp[-1].lex.line, *yyvsp[-1].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-2].interm.type))
            parseContext.recover();
		
		TSymbol* symbol = parseContext.symbolTable.find(*yyvsp[-1].lex.string);
		if (!error && symbol) {
			yyval.interm.intermDeclaration = ir_add_declaration(symbol, NULL, yyvsp[-1].lex.line, parseContext);
		} else {
			yyval.interm.intermDeclaration = 0;
		}
    ;
    break;}
case 117:
#line 1371 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();

        if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-4].interm.type))
            parseContext.recover();

        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
        else {
            yyvsp[-4].interm.type.setArray(true);
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-2].lex.line, *yyvsp[-3].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-4].interm.type, variable))
                parseContext.recover();
        }
		
		TSymbol* symbol = parseContext.symbolTable.find(*yyvsp[-3].lex.string);
		if (symbol) {
			yyval.interm.intermDeclaration = ir_add_declaration(symbol, NULL, yyvsp[-3].lex.line, parseContext);
		} else {
			yyval.interm.intermDeclaration = 0;
		}
    ;
    break;}
case 118:
#line 1394 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();

        if (parseContext.nonInitConstErrorCheck(yyvsp[-4].lex.line, *yyvsp[-4].lex.string, yyvsp[-5].interm.type))
			parseContext.recover();
		
		TVariable* variable;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-3].lex.line, yyvsp[-2].interm.intermTypedNode, size))
                parseContext.recover();

            yyvsp[-5].interm.type.setArray(true, size);
            if (parseContext.arrayErrorCheck(yyvsp[-3].lex.line, *yyvsp[-4].lex.string, yyvsp[0].interm.typeInfo, yyvsp[-5].interm.type, variable))
                parseContext.recover();
			
			if (variable) {
				yyval.interm.intermDeclaration = ir_add_declaration(variable, NULL, yyvsp[-4].lex.line, parseContext);
			} else {
				yyval.interm.intermDeclaration = 0;
			}
        }
	;
    break;}
case 119:
#line 1420 "hlslang.y"
{
		if (parseContext.structQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-6].interm.type))
			parseContext.recover();

		TVariable* variable = 0;
		if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
			parseContext.recover();
		else {
			yyvsp[-6].interm.type.setArray(true, yyvsp[0].interm.intermTypedNode->getType().getArraySize());
			if (parseContext.arrayErrorCheck(yyvsp[-4].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-6].interm.type, variable))
				parseContext.recover();
		}

		{        
			TIntermSymbol* symbol;
			if (!parseContext.executeInitializer(yyvsp[-5].lex.line, *yyvsp[-5].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-6].interm.type, yyvsp[0].interm.intermTypedNode, symbol, variable)) {
				if (variable)
					yyval.interm.intermDeclaration = ir_add_declaration(symbol, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext);
				else
					yyval.interm.intermDeclaration = 0;
			} else {
				parseContext.recover();
				yyval.interm.intermDeclaration = 0;
			}
		}
    ;
    break;}
case 120:
#line 1446 "hlslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-6].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();

        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-5].lex.line, yyvsp[-4].interm.intermTypedNode, size))
                parseContext.recover();

            yyvsp[-7].interm.type.setArray(true, size);
            if (parseContext.arrayErrorCheck(yyvsp[-5].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-7].interm.type, variable))
                parseContext.recover();
        }
        
		{        
			TIntermSymbol* symbol;
			if (!parseContext.executeInitializer(yyvsp[-6].lex.line, *yyvsp[-6].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-7].interm.type, yyvsp[0].interm.intermTypedNode, symbol, variable)) {
				if (variable)
					yyval.interm.intermDeclaration = ir_add_declaration(symbol, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext);
				else
					yyval.interm.intermDeclaration = 0;
			} else {
				parseContext.recover();
				yyval.interm.intermDeclaration = 0;
			}
		}       
    ;
    break;}
case 121:
#line 1476 "hlslang.y"
{
		if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.type))
			parseContext.recover();
		
		if (!IsSampler(yyvsp[-4].interm.type.type)) {
			TIntermSymbol* symbol;
			if (!parseContext.executeInitializer(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-4].interm.type, yyvsp[0].interm.intermTypedNode, symbol)) {
				if (symbol)
					yyval.interm.intermDeclaration = ir_add_declaration(symbol, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext);
				else
					yyval.interm.intermDeclaration = 0;
			} else {
				parseContext.recover();
				yyval.interm.intermDeclaration = 0;
			}
		} else {
			if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.type))
				parseContext.recover();

			if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-4].interm.type))
				parseContext.recover();

			if (parseContext.nonInitErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-2].interm.typeInfo, yyvsp[-4].interm.type))
				parseContext.recover();
				
			TSymbol* symbol = parseContext.symbolTable.find(*yyvsp[-3].lex.string);
			if (symbol) {
				yyval.interm.intermDeclaration = ir_add_declaration(symbol, NULL, yyvsp[-3].lex.line, parseContext);
			} else {
				yyval.interm.intermDeclaration = 0;
			}
		}
    ;
    break;}
case 122:
#line 1524 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
    ;
    break;}
case 123:
#line 1527 "hlslang.y"
{
        if (yyvsp[0].interm.type.array && parseContext.arrayQualifierErrorCheck(yyvsp[0].interm.type.line, yyvsp[-1].interm.type)) {
            parseContext.recover();
            yyvsp[0].interm.type.setArray(false);
        }

        if (yyvsp[-1].interm.type.qualifier == EvqAttribute &&
            (yyvsp[0].interm.type.type == EbtBool || yyvsp[0].interm.type.type == EbtInt)) {
            parseContext.error(yyvsp[0].interm.type.line, "cannot be bool or int", getQualifierString(yyvsp[-1].interm.type.qualifier), "");
            parseContext.recover();
        }
        yyval.interm.type = yyvsp[0].interm.type; 
        yyval.interm.type.qualifier = yyvsp[-1].interm.type.qualifier;
    ;
    break;}
case 124:
#line 1544 "hlslang.y"
{
        yyval.interm.type.setBasic(EbtVoid, EvqConst, yyvsp[0].lex.line);
    ;
    break;}
case 125:
#line 1547 "hlslang.y"
{
        yyval.interm.type.setBasic(EbtVoid, EvqStatic, yyvsp[0].lex.line);
    ;
    break;}
case 126:
#line 1550 "hlslang.y"
{
        yyval.interm.type.setBasic(EbtVoid, EvqConst, yyvsp[-1].lex.line); // same as "const" really
    ;
    break;}
case 127:
#line 1553 "hlslang.y"
{
        yyval.interm.type.setBasic(EbtVoid, EvqConst, yyvsp[-1].lex.line); // same as "const" really
    ;
    break;}
case 128:
#line 1556 "hlslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "uniform"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqUniform, yyvsp[0].lex.line);
    ;
    break;}
case 129:
#line 1564 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
    ;
    break;}
case 130:
#line 1567 "hlslang.y"
{
        yyval.interm.type = yyvsp[-3].interm.type;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
                parseContext.recover();
            yyval.interm.type.setArray(true, size);
        }
    ;
    break;}
case 131:
#line 1582 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtVoid,EbpUndefined);
    ;
    break;}
case 132:
#line 1585 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
    ;
    break;}
case 133:
#line 1588 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
    ;
    break;}
case 134:
#line 1591 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
    ;
    break;}
case 135:
#line 1594 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtInt,EbpHigh);
    ;
    break;}
case 136:
#line 1597 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtBool,EbpHigh);
    ;
    break;}
case 137:
#line 1600 "hlslang.y"
{
        TQualifier qual = parseContext.getDefaultQualifier();
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setVector(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 138:
#line 1611 "hlslang.y"
{
        TQualifier qual = parseContext.getDefaultQualifier();
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtInt, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtInt, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setVector(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 139:
#line 1622 "hlslang.y"
{
        TQualifier qual = parseContext.getDefaultQualifier();
        if ( yyvsp[-1].lex.i > 4 || yyvsp[-1].lex.i < 1 ) {
            parseContext.error(yyvsp[-4].lex.line, "vector dimension out of range", "", "");
            parseContext.recover();
            yyval.interm.type.setBasic(EbtBool, qual, yyvsp[-5].lex.line);
        } else {
            yyval.interm.type.setBasic(EbtBool, qual, yyvsp[-5].lex.line);
            yyval.interm.type.setVector(yyvsp[-1].lex.i);
        }
    ;
    break;}
case 140:
#line 1633 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setVector(2);
    ;
    break;}
case 141:
#line 1637 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setVector(3);
    ;
    break;}
case 142:
#line 1641 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setVector(4);
    ;
    break;}
case 143:
#line 1645 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setVector(2);
    ;
    break;}
case 144:
#line 1649 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setVector(3);
    ;
    break;}
case 145:
#line 1653 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setVector(4);
    ;
    break;}
case 146:
#line 1657 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setVector(2);
    ;
    break;}
case 147:
#line 1661 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setVector(3);
    ;
    break;}
case 148:
#line 1665 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setVector(4);
    ;
    break;}
case 149:
#line 1669 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtBool,EbpHigh);
        yyval.interm.type.setVector(2);
    ;
    break;}
case 150:
#line 1673 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtBool,EbpHigh);
        yyval.interm.type.setVector(3);
    ;
    break;}
case 151:
#line 1677 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtBool,EbpHigh);
        yyval.interm.type.setVector(4);
    ;
    break;}
case 152:
#line 1681 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtInt,EbpHigh);
        yyval.interm.type.setVector(2);
    ;
    break;}
case 153:
#line 1685 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtInt,EbpHigh);
        yyval.interm.type.setVector(3);
    ;
    break;}
case 154:
#line 1689 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtInt,EbpHigh);
        yyval.interm.type.setVector(4);
    ;
    break;}
case 155:
#line 1693 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(2, 2);
    ;
    break;}
case 156:
#line 1697 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("float2x3", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(3, 2);
    ;
    break;}
case 157:
#line 1702 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("float2x4", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(4, 2);
    ;
    break;}
case 158:
#line 1707 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("float3x2", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(2, 3);
    ;
    break;}
case 159:
#line 1712 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(3, 3);
    ;
    break;}
case 160:
#line 1716 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("float3x4", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(4, 3);
    ;
    break;}
case 161:
#line 1721 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("float4x2", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(2, 4);
    ;
    break;}
case 162:
#line 1726 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("float4x3", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(3, 4);
    ;
    break;}
case 163:
#line 1731 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpHigh);
        yyval.interm.type.setMatrix(4, 4);
    ;
    break;}
case 164:
#line 1735 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(2, 2);
    ;
    break;}
case 165:
#line 1739 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("half2x3", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(3, 2);
    ;
    break;}
case 166:
#line 1744 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("half2x4", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(4, 2);
    ;
    break;}
case 167:
#line 1749 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("half3x2", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(2, 3);
    ;
    break;}
case 168:
#line 1754 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(3, 3);
    ;
    break;}
case 169:
#line 1758 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("half3x4", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(4, 3);
    ;
    break;}
case 170:
#line 1763 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("half4x2", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(2, 4);
    ;
    break;}
case 171:
#line 1768 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("half4x3", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(3, 4);
    ;
    break;}
case 172:
#line 1773 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpMedium);
        yyval.interm.type.setMatrix(4, 4);
    ;
    break;}
case 173:
#line 1777 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(2, 2);
    ;
    break;}
case 174:
#line 1781 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("fixed2x3", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(3, 2);
    ;
    break;}
case 175:
#line 1786 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("fixed2x4", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(4, 2);
    ;
    break;}
case 176:
#line 1791 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("fixed3x2", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(2, 3);
    ;
    break;}
case 177:
#line 1796 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(3, 3);
    ;
    break;}
case 178:
#line 1800 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("fixed3x4", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(4, 3);
    ;
    break;}
case 179:
#line 1805 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("fixed4x2", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(2, 4);
    ;
    break;}
case 180:
#line 1810 "hlslang.y"
{
		NONSQUARE_MATRIX_CHECK("fixed4x3", yyvsp[0].lex.line);
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(3, 4);
    ;
    break;}
case 181:
#line 1815 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtFloat,EbpLow);
        yyval.interm.type.setMatrix(4, 4);
    ;
    break;}
case 182:
#line 1819 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtTexture,EbpUndefined);
    ;
    break;}
case 183:
#line 1822 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerGeneric,EbpUndefined);
    ;
    break;}
case 184:
#line 1825 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler1D,EbpUndefined);
    ;
    break;}
case 185:
#line 1828 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler2D,EbpUndefined);
    ;
    break;}
case 186:
#line 1831 "hlslang.y"
{
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler2D,EbpMedium);
	;
    break;}
case 187:
#line 1834 "hlslang.y"
{
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler2D,EbpHigh);
	;
    break;}
case 188:
#line 1837 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler3D,EbpUndefined);
    ;
    break;}
case 189:
#line 1840 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerCube,EbpUndefined);
    ;
    break;}
case 190:
#line 1843 "hlslang.y"
{
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerCube,EbpMedium);
	;
    break;}
case 191:
#line 1846 "hlslang.y"
{
		SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerCube,EbpHigh);
	;
    break;}
case 192:
#line 1849 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerRect,EbpUndefined);
    ;
    break;}
case 193:
#line 1852 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSamplerRectShadow,EbpLow); // ES3 doesn't have default precision for shadow samplers, so always emit lowp
    ;
    break;}
case 194:
#line 1855 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler1DShadow,EbpLow); // ES3 doesn't have default precision for shadow samplers, so always emit lowp
    ;
    break;}
case 195:
#line 1858 "hlslang.y"
{
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtSampler2DShadow,EbpLow); // ES3 doesn't have default precision for shadow samplers, so always emit lowp
    ;
    break;}
case 196:
#line 1861 "hlslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
        yyval.interm.type.qualifier = parseContext.getDefaultQualifier();
    ;
    break;}
case 197:
#line 1865 "hlslang.y"
{
        //
        // This is for user defined type names.  The lexical phase looked up the
        // type.
        //
        TType& structure = static_cast<TVariable*>(yyvsp[0].lex.symbol)->getType();
        SET_BASIC_TYPE(yyval.interm.type,yyvsp[0].lex,EbtStruct,EbpUndefined);
        yyval.interm.type.userDef = &structure;
    ;
    break;}
case 198:
#line 1877 "hlslang.y"
{
        TType* structure = new TType(yyvsp[-1].interm.typeList, *yyvsp[-3].lex.string, EbpUndefined, yyvsp[-3].lex.line);
        TVariable* userTypeDef = new TVariable(yyvsp[-3].lex.string, *structure, true);
        if (! parseContext.symbolTable.insert(*userTypeDef)) {
            parseContext.error(yyvsp[-3].lex.line, "redefinition", yyvsp[-3].lex.string->c_str(), "struct");
            parseContext.recover();
        }
        yyval.interm.type.setBasic(EbtStruct, EvqTemporary, yyvsp[-4].lex.line);
        yyval.interm.type.userDef = structure;
    ;
    break;}
case 199:
#line 1887 "hlslang.y"
{
        TType* structure = new TType(yyvsp[-1].interm.typeList, TString(""), EbpUndefined, yyvsp[-3].lex.line);
        yyval.interm.type.setBasic(EbtStruct, EvqTemporary, yyvsp[-3].lex.line);
        yyval.interm.type.userDef = structure;
    ;
    break;}
case 200:
#line 1895 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[0].interm.typeList;
    ;
    break;}
case 201:
#line 1898 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[-1].interm.typeList;
        for (unsigned int i = 0; i < yyvsp[0].interm.typeList->size(); ++i) {
            for (unsigned int j = 0; j < yyval.interm.typeList->size(); ++j) {
                if ((*yyval.interm.typeList)[j].type->getFieldName() == (*yyvsp[0].interm.typeList)[i].type->getFieldName()) {
                    parseContext.error((*yyvsp[0].interm.typeList)[i].line, "duplicate field name in structure:", "struct", (*yyvsp[0].interm.typeList)[i].type->getFieldName().c_str());
                    parseContext.recover();
                }
            }
            yyval.interm.typeList->push_back((*yyvsp[0].interm.typeList)[i]);
        }
    ;
    break;}
case 202:
#line 1913 "hlslang.y"
{
        yyval.interm.typeList = yyvsp[-1].interm.typeList;

        if (parseContext.voidErrorCheck(yyvsp[-2].interm.type.line, (*yyvsp[-1].interm.typeList)[0].type->getFieldName(), yyvsp[-2].interm.type)) {
            parseContext.recover();
        }
        for (unsigned int i = 0; i < yyval.interm.typeList->size(); ++i) {
            //
            // Careful not to replace already know aspects of type, like array-ness
            //
            TType* type = (*yyval.interm.typeList)[i].type;
            type->setBasicType(yyvsp[-2].interm.type.type);
            type->setPrecision(yyvsp[-2].interm.type.precision);
            type->setColsCount(yyvsp[-2].interm.type.matcols);
            type->setRowsCount(yyvsp[-2].interm.type.matrows);
            type->setMatrix(yyvsp[-2].interm.type.matrix);
            
            // don't allow arrays of arrays
            if (type->isArray()) {
                if (parseContext.arrayTypeErrorCheck(yyvsp[-2].interm.type.line, yyvsp[-2].interm.type))
                    parseContext.recover();
            }
            if (yyvsp[-2].interm.type.array)
                type->setArraySize(yyvsp[-2].interm.type.arraySize);
            if (yyvsp[-2].interm.type.userDef) {
                type->setStruct(yyvsp[-2].interm.type.userDef->getStruct());
                type->setTypeName(yyvsp[-2].interm.type.userDef->getTypeName());
            }
        }
    ;
    break;}
case 203:
#line 1946 "hlslang.y"
{
        yyval.interm.typeList = NewPoolTTypeList();
        yyval.interm.typeList->push_back(yyvsp[0].interm.typeLine);
    ;
    break;}
case 204:
#line 1950 "hlslang.y"
{
        yyval.interm.typeList->push_back(yyvsp[0].interm.typeLine);
    ;
    break;}
case 205:
#line 1956 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid, EbpUndefined);
        yyval.interm.typeLine.line = yyvsp[0].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[0].lex.string);
    ;
    break;}
case 206:
#line 1961 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid, EbpUndefined);
        yyval.interm.typeLine.line = yyvsp[-2].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-2].lex.string);
        yyval.interm.typeLine.type->setSemantic(*yyvsp[0].lex.string);
    ;
    break;}
case 207:
#line 1967 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid, EbpUndefined);
        yyval.interm.typeLine.line = yyvsp[-3].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-3].lex.string);

        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
            parseContext.recover();
        yyval.interm.typeLine.type->setArraySize(size);
    ;
    break;}
case 208:
#line 1977 "hlslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid, EbpUndefined);
        yyval.interm.typeLine.line = yyvsp[-5].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-5].lex.string);

        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-4].lex.line, yyvsp[-3].interm.intermTypedNode, size))
            parseContext.recover();
        yyval.interm.typeLine.type->setArraySize(size);
        yyval.interm.typeLine.type->setSemantic(*yyvsp[0].lex.string);
    ;
    break;}
case 209:
#line 1993 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 210:
#line 1994 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 211:
#line 1995 "hlslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 212:
#line 1999 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermDeclaration; ;
    break;}
case 213:
#line 2003 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermAggregate; ;
    break;}
case 214:
#line 2004 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 215:
#line 2010 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 216:
#line 2011 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 217:
#line 2012 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 218:
#line 2013 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 219:
#line 2014 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 220:
#line 2018 "hlslang.y"
{ yyval.interm.intermAggregate = 0; ;
    break;}
case 221:
#line 2019 "hlslang.y"
{ parseContext.symbolTable.push(); ;
    break;}
case 222:
#line 2019 "hlslang.y"
{ parseContext.symbolTable.pop(); ;
    break;}
case 223:
#line 2019 "hlslang.y"
{
        if (yyvsp[-2].interm.intermAggregate != 0)
            yyvsp[-2].interm.intermAggregate->setOperator(EOpSequence);
        yyval.interm.intermAggregate = yyvsp[-2].interm.intermAggregate;
    ;
    break;}
case 224:
#line 2027 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 225:
#line 2028 "hlslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 226:
#line 2033 "hlslang.y"
{
        yyval.interm.intermNode = 0;
    ;
    break;}
case 227:
#line 2036 "hlslang.y"
{
        if (yyvsp[-1].interm.intermAggregate)
            yyvsp[-1].interm.intermAggregate->setOperator(EOpSequence);
        yyval.interm.intermNode = yyvsp[-1].interm.intermAggregate;
    ;
    break;}
case 228:
#line 2044 "hlslang.y"
{
        yyval.interm.intermAggregate = ir_make_aggregate(yyvsp[0].interm.intermNode, gNullSourceLoc); 
    ;
    break;}
case 229:
#line 2047 "hlslang.y"
{ 
        yyval.interm.intermAggregate = ir_grow_aggregate(yyvsp[-1].interm.intermAggregate, yyvsp[0].interm.intermNode, gNullSourceLoc);
    ;
    break;}
case 230:
#line 2053 "hlslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 231:
#line 2054 "hlslang.y"
{ yyval.interm.intermNode = static_cast<TIntermNode*>(yyvsp[-1].interm.intermTypedNode); ;
    break;}
case 232:
#line 2058 "hlslang.y"
{
        if (parseContext.boolErrorCheck(yyvsp[-4].lex.line, yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermNode = ir_add_selection(yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.nodePair, yyvsp[-4].lex.line, parseContext.infoSink);
    ;
    break;}
case 233:
#line 2066 "hlslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-2].interm.intermNode;
        yyval.interm.nodePair.node2 = yyvsp[0].interm.intermNode;
    ;
    break;}
case 234:
#line 2070 "hlslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[0].interm.intermNode;
        yyval.interm.nodePair.node2 = 0;
    ;
    break;}
case 235:
#line 2080 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        if (parseContext.boolErrorCheck(yyvsp[0].interm.intermTypedNode->getLine(), yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
    ;
    break;}
case 236:
#line 2085 "hlslang.y"
{
        TIntermSymbol* symbol;
        if (parseContext.structQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        if (parseContext.boolErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();

        if (!parseContext.executeInitializer(yyvsp[-2].lex.line, *yyvsp[-2].lex.string, yyvsp[-3].interm.type, yyvsp[0].interm.intermTypedNode, symbol)) {
			yyval.interm.intermTypedNode = ir_add_declaration(symbol, yyvsp[0].interm.intermTypedNode, yyvsp[-2].lex.line, parseContext);
        } else {
            parseContext.recover();
            yyval.interm.intermTypedNode = 0;
        }
    ;
    break;}
case 237:
#line 2102 "hlslang.y"
{ parseContext.symbolTable.push(); ++parseContext.loopNestingLevel; ;
    break;}
case 238:
#line 2102 "hlslang.y"
{
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = ir_add_loop(ELoopWhile, yyvsp[-2].interm.intermTypedNode, 0, yyvsp[0].interm.intermNode, yyvsp[-5].lex.line);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 239:
#line 2107 "hlslang.y"
{ ++parseContext.loopNestingLevel; ;
    break;}
case 240:
#line 2107 "hlslang.y"
{
        if (parseContext.boolErrorCheck(yyvsp[0].lex.line, yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
                    
        yyval.interm.intermNode = ir_add_loop(ELoopDoWhile, yyvsp[-2].interm.intermTypedNode, 0, yyvsp[-5].interm.intermNode, yyvsp[-4].lex.line);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 241:
#line 2114 "hlslang.y"
{ parseContext.symbolTable.push(); ++parseContext.loopNestingLevel; ;
    break;}
case 242:
#line 2114 "hlslang.y"
{
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = ir_make_aggregate(yyvsp[-3].interm.intermNode, yyvsp[-5].lex.line);
        yyval.interm.intermNode = ir_grow_aggregate(
                yyval.interm.intermNode,
                ir_add_loop(ELoopFor, reinterpret_cast<TIntermTyped*>(yyvsp[-2].interm.nodePair.node1), reinterpret_cast<TIntermTyped*>(yyvsp[-2].interm.nodePair.node2), yyvsp[0].interm.intermNode, yyvsp[-6].lex.line),
                yyvsp[-6].lex.line);
        yyval.interm.intermNode->getAsAggregate()->setOperator(EOpSequence);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 243:
#line 2127 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode;
    ;
    break;}
case 244:
#line 2130 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode;
    ;
    break;}
case 245:
#line 2136 "hlslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 246:
#line 2139 "hlslang.y"
{
        yyval.interm.intermTypedNode = 0;
    ;
    break;}
case 247:
#line 2145 "hlslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-1].interm.intermTypedNode;
        yyval.interm.nodePair.node2 = 0;
    ;
    break;}
case 248:
#line 2149 "hlslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-2].interm.intermTypedNode;
        yyval.interm.nodePair.node2 = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 249:
#line 2156 "hlslang.y"
{
        if (parseContext.loopNestingLevel <= 0) {
            parseContext.error(yyvsp[-1].lex.line, "continue statement only allowed in loops", "", "");
            parseContext.recover();
        }        
        yyval.interm.intermNode = ir_add_branch(EOpContinue, yyvsp[-1].lex.line);
    ;
    break;}
case 250:
#line 2163 "hlslang.y"
{
        if (parseContext.loopNestingLevel <= 0) {
            parseContext.error(yyvsp[-1].lex.line, "break statement only allowed in loops", "", "");
            parseContext.recover();
        }        
        yyval.interm.intermNode = ir_add_branch(EOpBreak, yyvsp[-1].lex.line);
    ;
    break;}
case 251:
#line 2170 "hlslang.y"
{
        yyval.interm.intermNode = ir_add_branch(EOpReturn, yyvsp[-1].lex.line);
        if (parseContext.currentFunctionType->getBasicType() != EbtVoid) {
            parseContext.error(yyvsp[-1].lex.line, "non-void function must return a value", "return", "");
            parseContext.recover();
        }
    ;
    break;}
case 252:
#line 2177 "hlslang.y"
{
        TIntermTyped *temp = yyvsp[-1].interm.intermTypedNode;
        if (parseContext.currentFunctionType->getBasicType() == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "void function cannot return a value", "return", "");
            parseContext.recover();
        } else if (*(parseContext.currentFunctionType) != yyvsp[-1].interm.intermTypedNode->getType()) {
            TOperator op = parseContext.getConstructorOp(*(parseContext.currentFunctionType));
            if (op != EOpNull)
                temp = parseContext.constructBuiltIn((parseContext.currentFunctionType), op, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line, false);
            else
                temp = 0;
            if (temp == 0) {
                parseContext.error(yyvsp[-2].lex.line, "function return is not matching type:", "return", "");
                parseContext.recover();
                temp = yyvsp[-1].interm.intermTypedNode;
            }
        }
        yyval.interm.intermNode = ir_add_branch(EOpReturn, temp, yyvsp[-2].lex.line);
        parseContext.functionReturnsValue = true;
    ;
    break;}
case 253:
#line 2197 "hlslang.y"
{
		// Jim: using discard when compiling vertex shaders should not be considered a syntactic error, instead,
		// we should issue a semantic error only if the code path is actually executed. (Not yet implemented)
        //FRAG_ONLY("discard", $1.line);
        yyval.interm.intermNode = ir_add_branch(EOpKill, yyvsp[-1].lex.line);
    ;
    break;}
case 254:
#line 2208 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode;
        parseContext.treeRoot = yyval.interm.intermNode;
    ;
    break;}
case 255:
#line 2212 "hlslang.y"
{
        yyval.interm.intermNode = ir_grow_aggregate(yyvsp[-1].interm.intermNode, yyvsp[0].interm.intermNode, gNullSourceLoc);
        parseContext.treeRoot = yyval.interm.intermNode;
    ;
    break;}
case 256:
#line 2219 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode;
    ;
    break;}
case 257:
#line 2222 "hlslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermDeclaration;
    ;
    break;}
case 258:
#line 2225 "hlslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 259:
#line 2229 "hlslang.y"
{
        TFunction& function = *(yyvsp[0].interm.function);
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(function.getMangledName()));
        //
        // Note:  'prevDec' could be 'function' if this is the first time we've seen function
        // as it would have just been put in the symbol table.  Otherwise, we're looking up
        // an earlier occurance.
        //
        if (prevDec->isDefined()) {
            //
            // Then this function already has a body.
            //
            parseContext.error(yyvsp[0].interm.line, "function already has a body", function.getName().c_str(), "");
            parseContext.recover();
        }
        prevDec->setDefined();

        //
        // New symbol table scope for body of function plus its arguments
        //
        parseContext.symbolTable.push();

        //
        // Remember the return type for later checking for RETURN statements.
        //
        parseContext.currentFunctionType = &(prevDec->getReturnType());
        parseContext.functionReturnsValue = false;

        //
        // Insert parameters into the symbol table.
        // If the parameter has no name, it's not an error, just don't insert it
        // (could be used for unused args).
        //
        // Also, accumulate the list of parameters into the HIL, so lower level code
        // knows where to find parameters.
        //
        TIntermAggregate* paramNodes = new TIntermAggregate;
        for (int i = 0; i < function.getParamCount(); i++) {
            TParameter& param = function[i];
            if (param.name != 0) {
                TVariable *variable = new TVariable(param.name, param.info, *param.type);
                //
                // Insert the parameters with name in the symbol table.
                //
                if (! parseContext.symbolTable.insert(*variable)) {
                    parseContext.error(yyvsp[0].interm.line, "redefinition", variable->getName().c_str(), "");
                    parseContext.recover();
                    delete variable;
                }
                //
                // Transfer ownership of name pointer to symbol table.
                //
                param.name = 0;

                //
                // Add the parameter to the HIL
                //                
                paramNodes = ir_grow_aggregate(
                                               paramNodes, 
                                               ir_add_symbol(variable, yyvsp[0].interm.line),
                                               yyvsp[0].interm.line);
            } else {
                paramNodes = ir_grow_aggregate(paramNodes, ir_add_symbol_internal(0, "", param.info, *param.type, yyvsp[0].interm.line), yyvsp[0].interm.line);
            }
        }
        ir_set_aggregate_op(paramNodes, EOpParameters, yyvsp[0].interm.line);
        yyvsp[0].interm.intermAggregate = paramNodes;
        parseContext.loopNestingLevel = 0;
    ;
    break;}
case 260:
#line 2298 "hlslang.y"
{
        //?? Check that all paths return a value if return type != void ?
        //   May be best done as post process phase on intermediate code
        if (parseContext.currentFunctionType->getBasicType() != EbtVoid && ! parseContext.functionReturnsValue) {
            parseContext.error(yyvsp[-2].interm.line, "function does not return a value:", "", yyvsp[-2].interm.function->getName().c_str());
            parseContext.recover();
        }
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = ir_grow_aggregate(yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermNode, gNullSourceLoc);
        ir_set_aggregate_op(yyval.interm.intermNode, EOpFunction, yyvsp[-2].interm.line);
        yyval.interm.intermNode->getAsAggregate()->setName(yyvsp[-2].interm.function->getMangledName().c_str());
        yyval.interm.intermNode->getAsAggregate()->setPlainName(yyvsp[-2].interm.function->getName().c_str());
        yyval.interm.intermNode->getAsAggregate()->setType(yyvsp[-2].interm.function->getReturnType());
        
	if ( yyvsp[-2].interm.function->getInfo())
	    yyval.interm.intermNode->getAsAggregate()->setSemantic(yyvsp[-2].interm.function->getInfo()->getSemantic());
    ;
    break;}
case 261:
#line 2318 "hlslang.y"
{
		yyval.interm.intermTypedNode = yyvsp[-1].interm.intermAggregate;
    ;
    break;}
case 262:
#line 2321 "hlslang.y"
{
		yyval.interm.intermTypedNode = yyvsp[-2].interm.intermAggregate;
    ;
    break;}
case 263:
#line 2328 "hlslang.y"
{
        //create a new aggNode
       yyval.interm.intermAggregate = ir_make_aggregate( yyvsp[0].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode->getLine());       
    ;
    break;}
case 264:
#line 2332 "hlslang.y"
{
       //take the inherited aggNode and return it
       yyval.interm.intermAggregate = yyvsp[0].interm.intermTypedNode->getAsAggregate();
    ;
    break;}
case 265:
#line 2336 "hlslang.y"
{
        // append to the aggNode
       yyval.interm.intermAggregate = ir_grow_aggregate( yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode->getLine());       
    ;
    break;}
case 266:
#line 2340 "hlslang.y"
{
       // append all children or $3 to $1
       yyval.interm.intermAggregate = parseContext.mergeAggregates( yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermTypedNode->getAsAggregate());
    ;
    break;}
case 267:
#line 2347 "hlslang.y"
{
        //empty annotation
      yyval.interm.ann = 0;
    ;
    break;}
case 268:
#line 2351 "hlslang.y"
{
      yyval.interm.ann = yyvsp[-1].interm.ann;
    ;
    break;}
case 269:
#line 2357 "hlslang.y"
{
        yyval.interm.ann = new TAnnotation;
		yyval.interm.ann->addKey( *yyvsp[0].lex.string);
    ;
    break;}
case 270:
#line 2361 "hlslang.y"
{
        yyvsp[-1].interm.ann->addKey( *yyvsp[0].lex.string);
		yyval.interm.ann = yyvsp[-1].interm.ann;
    ;
    break;}
case 271:
#line 2368 "hlslang.y"
{
        yyval.lex.string = yyvsp[-3].lex.string;
    ;
    break;}
case 272:
#line 2374 "hlslang.y"
{;
    break;}
case 273:
#line 2375 "hlslang.y"
{;
    break;}
case 274:
#line 2376 "hlslang.y"
{;
    break;}
case 275:
#line 2377 "hlslang.y"
{;
    break;}
case 276:
#line 2378 "hlslang.y"
{;
    break;}
case 277:
#line 2379 "hlslang.y"
{;
    break;}
case 278:
#line 2380 "hlslang.y"
{;
    break;}
case 279:
#line 2381 "hlslang.y"
{;
    break;}
case 280:
#line 2382 "hlslang.y"
{;
    break;}
case 281:
#line 2383 "hlslang.y"
{;
    break;}
case 282:
#line 2384 "hlslang.y"
{;
    break;}
case 283:
#line 2385 "hlslang.y"
{;
    break;}
case 284:
#line 2386 "hlslang.y"
{;
    break;}
case 285:
#line 2387 "hlslang.y"
{;
    break;}
case 286:
#line 2388 "hlslang.y"
{;
    break;}
case 287:
#line 2389 "hlslang.y"
{;
    break;}
case 288:
#line 2390 "hlslang.y"
{;
    break;}
case 289:
#line 2391 "hlslang.y"
{;
    break;}
case 290:
#line 2392 "hlslang.y"
{;
    break;}
case 291:
#line 2393 "hlslang.y"
{;
    break;}
case 292:
#line 2394 "hlslang.y"
{;
    break;}
case 293:
#line 2398 "hlslang.y"
{;
    break;}
case 294:
#line 2399 "hlslang.y"
{;
    break;}
case 295:
#line 2400 "hlslang.y"
{;
    break;}
case 296:
#line 2401 "hlslang.y"
{;
    break;}
case 297:
#line 2405 "hlslang.y"
{
		yyval.lex.f = (float)yyvsp[0].lex.i;
	;
    break;}
case 298:
#line 2408 "hlslang.y"
{
		yyval.lex.f = (yyvsp[0].lex.b) ? 1.0f : 0.0f;
	;
    break;}
case 299:
#line 2411 "hlslang.y"
{
		yyval.lex.f = yyvsp[0].lex.f;
	;
    break;}
case 300:
#line 2417 "hlslang.y"
{;
    break;}
case 301:
#line 2421 "hlslang.y"
{;
    break;}
case 302:
#line 2422 "hlslang.y"
{;
    break;}
case 303:
#line 2426 "hlslang.y"
{;
    break;}
case 304:
#line 2430 "hlslang.y"
{
        // This is being thrown away
    ;
    break;}
case 305:
#line 2436 "hlslang.y"
{ yyval.lex.string = yyvsp[0].lex.string;;
    break;}
case 306:
#line 2440 "hlslang.y"
{ yyval.interm.typeInfo = 0;;
    break;}
case 307:
#line 2441 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[0].lex.string, 0); ;
    break;}
case 308:
#line 2442 "hlslang.y"
{ yyval.interm.typeInfo = 0; ;
    break;}
case 309:
#line 2443 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( "", yyvsp[0].interm.ann); ;
    break;}
case 310:
#line 2444 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-1].lex.string, yyvsp[0].interm.ann); ;
    break;}
case 311:
#line 2445 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-1].lex.string, 0); ;
    break;}
case 312:
#line 2446 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( "", yyvsp[0].interm.ann); ;
    break;}
case 313:
#line 2447 "hlslang.y"
{ yyval.interm.typeInfo = new TTypeInfo( *yyvsp[-2].lex.string, yyvsp[0].interm.ann); ;
    break;}
case 314:
#line 2451 "hlslang.y"
{
		TIntermConstant* constant = ir_add_constant(TType(EbtFloat, EbpUndefined, EvqConst, 1), yyvsp[-3].lex.line);
		constant->setValue(0.f);
		yyval.interm.intermTypedNode = constant;
	;
    break;}
case 315:
#line 2456 "hlslang.y"
{
	;
    break;}
case 316:
#line 2461 "hlslang.y"
{ ;
    break;}
case 317:
#line 2462 "hlslang.y"
{ ;
    break;}
case 318:
#line 2466 "hlslang.y"
{;
    break;}
case 319:
#line 2467 "hlslang.y"
{;
    break;}
case 320:
#line 2468 "hlslang.y"
{;
    break;}
case 321:
#line 2469 "hlslang.y"
{;
    break;}
case 322:
#line 2470 "hlslang.y"
{;
    break;}
case 323:
#line 2471 "hlslang.y"
{;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2474 "hlslang.y"

