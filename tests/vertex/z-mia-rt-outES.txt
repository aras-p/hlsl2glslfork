mat2 xll_transpose(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 106
struct MySurfaceOutput {
    highp vec3 Albedo;
    highp vec3 Normal;
    highp vec3 Emission;
    highp vec3 Specular;
    highp float Reflectivity;
    highp float Roughness;
    highp float Alpha;
};
#line 244
struct ContinuousSamplerLOD {
    highp float mip0;
    highp float mip1;
    highp float mipFrac;
};
#line 259
struct PlanarMapping {
    highp vec4 plane;
    highp vec3 tangent;
    highp vec3 bitangent;
    highp vec2 uvOffset;
};
#line 93
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv_BumpMap;
    highp vec3 viewDir;
    highp vec3 worldPos;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 398
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec3 worldPos;
    highp vec3 viewDir;
    lowp vec4 TtoW0;
    lowp vec4 TtoW1;
    lowp vec4 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec2 _LightCoord;
};
#line 17
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
#line 3
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
#line 7
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
#line 11
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
#line 15
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
#line 27
#line 32
#line 37
#line 41
#line 46
#line 85
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 117
uniform highp float _Rolloff;
#line 122
#line 126
uniform highp float _Falloff;
#line 212
uniform highp float _Roughness;
uniform highp float _Roughness2;
#line 220
uniform highp float _Reflectivity;
uniform highp float _Refl0, _Refl90;
uniform highp float _Metalic;
uniform highp float _SpecOnlyIntensity;
#line 224
uniform highp float _ReflOnlyIntensity;
#line 251
#line 255
#line 267
uniform highp mat4 _WorldToMirrorProjMatrix;
uniform sampler2D _MirrorTex;
#line 293
uniform highp vec4 _PlanarReflection0;
uniform highp vec4 _PlanarReflectionTangent0, _PlanarReflectionBiTangent0;
#line 333
uniform sampler2D _PlanarReflectionTex0;
uniform highp vec4 _PlanarReflection1;
uniform highp vec4 _PlanarReflectionTangent1, _PlanarReflectionBiTangent1;
uniform sampler2D _PlanarReflectionTex1;
#line 337
uniform highp vec4 _PlanarReflection2;
uniform highp vec4 _PlanarReflectionTangent2, _PlanarReflectionBiTangent2;
uniform sampler2D _PlanarReflectionTex2;
uniform samplerCube _Cube;
#line 341
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap, _BumpMap2;
#line 373
uniform sampler2D _MainReflectivityTex;
uniform sampler2D _MainRoughnessTex;
uniform highp vec4 _BumpMap2_ST;
uniform lowp vec4 _Color, _ReflColor;
#line 377
uniform highp float _BumpMapFactor, _BumpMapFactor2;
uniform highp vec4 _MainReflectivityTex_AddMul;
uniform highp vec4 _MainRoughnessTex_AddMul;
#line 412
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _BumpMap_ST;
highp vec3 ObjSpaceViewDir( in highp vec4 v );
highp vec3 ObjSpaceLightDir( in highp vec4 v );
v2f_surf xlat_main( in appdata_full v );
#line 41
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 32
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 414
v2f_surf xlat_main( in appdata_full v ) {
    #line 416
    v2f_surf o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
    #line 420
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
    o.worldPos = (_Object2World * v.vertex).xyz;
    highp vec3 viewDir = (-ObjSpaceViewDir( v.vertex));
    #line 424
    highp vec3 worldRefl = (mat3( _Object2World) * viewDir);
    highp vec3 binormal = (cross( normalize(v.normal), normalize(v.tangent.xyz)) * v.tangent.w);
    highp mat3 rotation = xll_transpose(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = (vec4( (rotation * xll_matrixindex (_Object2World, 0).xyz), worldRefl.x) * unity_Scale.w);
    #line 428
    o.TtoW1 = (vec4( (rotation * xll_matrixindex (_Object2World, 1).xyz), worldRefl.y) * unity_Scale.w);
    o.TtoW2 = (vec4( (rotation * xll_matrixindex (_Object2World, 2).xyz), worldRefl.z) * unity_Scale.w);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    #line 432
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    #line 436
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
attribute vec4 TANGENT;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_TEXCOORD3;
varying lowp vec4 xlv_TEXCOORD4;
varying lowp vec4 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD8;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = xlat_main( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_TEXCOORD0 = vec4( xl_retval.pack0);
    xlv_TEXCOORD1 = vec3( xl_retval.worldPos);
    xlv_TEXCOORD2 = vec3( xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4( xl_retval.TtoW0);
    xlv_TEXCOORD4 = vec4( xl_retval.TtoW1);
    xlv_TEXCOORD5 = vec4( xl_retval.TtoW2);
    xlv_TEXCOORD6 = vec3( xl_retval.lightDir);
    xlv_TEXCOORD7 = vec3( xl_retval.vlight);
    xlv_TEXCOORD8 = vec2( xl_retval._LightCoord);
}

// uniforms:
// glstate_matrix_mvp:<none> type 21 arrsize 0
// _MainTex_ST:<none> type 12 arrsize 0
// _BumpMap_ST:<none> type 12 arrsize 0
// _Object2World:<none> type 21 arrsize 0
// unity_Scale:<none> type 12 arrsize 0
// _LightMatrix0:<none> type 21 arrsize 0
// _World2Object:<none> type 21 arrsize 0
// _WorldSpaceLightPos0:<none> type 12 arrsize 0
// _World2Object:<none> type 21 arrsize 0
// _WorldSpaceCameraPos:<none> type 11 arrsize 0
// unity_Scale:<none> type 12 arrsize 0
