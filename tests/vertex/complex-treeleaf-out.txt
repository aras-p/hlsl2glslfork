vec2 xll_matrixindex (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 10
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
#line 105
struct v2f_surf {
    vec4 pos;
    vec2 hip_pack0;
    vec4 lop_color;
    vec3 lightDir;
    vec3 viewDir;
    vec2 _LightCoord;
};
uniform mat4 _LightMatrix0;
uniform vec4 _MainTex_ST;
uniform mat4 _Object2World;
uniform vec4 _Scale;
uniform float _SquashAmount;
uniform vec4 _SquashPlaneNormal;
uniform vec4 _Time;
uniform vec4 _Wind;
uniform mat4 _World2Object;
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 glstate_matrix_invtrans_modelview0;
uniform mat4 glstate_matrix_mvp;
uniform vec4 unity_Scale;
vec4 Squash( in vec4 pos );
void ExpandBillboard( in mat4 mat, inout vec4 pos, inout vec3 normal, inout vec4 tangent );
vec4 TriangleWave( in vec4 x );
vec4 SmoothCurve( in vec4 x );
vec4 SmoothTriangleWave( in vec4 x );
vec4 AnimateVertex( in vec4 pos, in vec3 normal, in vec4 animParams );
void TreeVertLeaf( inout appdata_full v );
vec3 ObjSpaceViewDir( in vec4 v );
vec3 ObjSpaceLightDir( in vec4 v );
v2f_surf xlat_main( in appdata_full v );
#line 45
vec4 Squash( in vec4 pos ) {
    vec3 planeNormal;
    vec3 projectedVertex;
    planeNormal = _SquashPlaneNormal.xyz ;
    projectedVertex = (pos.xyz  - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w ) * planeNormal));
    #line 49
    pos = vec4( mix( projectedVertex, pos.xyz , vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 53
void ExpandBillboard( in mat4 mat, inout vec4 pos, inout vec3 normal, inout vec4 tangent ) {
    float isBillboard;
    vec3 norb;
    vec3 tanb;
    isBillboard = (1.0 - abs( tangent.w  ));
    norb = vec3( normalize( ( vec4( normal, 0.0) * mat ) ));
    #line 57
    tanb = vec3( normalize( ( vec4( tangent.xyz , 0.0) * mat ) ));
    pos += (( vec4( normal.xy , 0.0, 0.0) * mat ) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 66
vec4 TriangleWave( in vec4 x ) {
    return abs( ((fract( (x + 0.5) ) * 2.0) - 1.0) );
}
#line 62
vec4 SmoothCurve( in vec4 x ) {
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 70
vec4 SmoothTriangleWave( in vec4 x ) {
    return SmoothCurve( TriangleWave( x));
}
#line 74
vec4 AnimateVertex( in vec4 pos, in vec3 normal, in vec4 animParams ) {
    float fDetailAmp = 0.1;
    float fBranchAmp = 0.3;
    float fObjPhase;
    float fBranchPhase;
    float fVtxPhase;
    vec2 vWavesIn;
    vec4 vWaves;
    vec2 vWavesSum;
    vec3 bend;
    #line 78
    fObjPhase = dot( xll_matrixindex (_Object2World, 3).xyz , vec3( 1.0));
    fBranchPhase = (fObjPhase + animParams.x );
    fVtxPhase = dot( pos.xyz , vec3( (animParams.y  + fBranchPhase)));
    vWavesIn = (_Time.yy  + vec2( fVtxPhase, fBranchPhase));
    #line 82
    vWaves = ((fract( (vWavesIn.xxyy  * vec4( 1.975, 0.793, 0.375, 0.193)) ) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    vWavesSum = (vWaves.xz  + vWaves.yw );
    bend = ((animParams.y  * fDetailAmp) * normal.xyz );
    #line 86
    bend.y  = (animParams.w  * fBranchAmp);
    pos.xyz  += (((vWavesSum.xyx  * bend) + ((_Wind.xyz  * vWavesSum.y ) * animParams.w )) * _Wind.w );
    pos.xyz  += (animParams.z  * _Wind.xyz );
    return pos;
}
#line 91
void TreeVertLeaf( inout appdata_full v ) {
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz  *= _Scale.xyz ;
    #line 95
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy , v.texcoord1.xy ));
    v.vertex = Squash( v.vertex);
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w );
    v.normal = normalize( v.normal );
    #line 99
    v.tangent.xyz  = normalize( v.tangent.xyz  );
}
#line 25
vec3 ObjSpaceViewDir( in vec4 v ) {
    vec3 objSpaceCameraPos;
    objSpaceCameraPos = (( _World2Object * vec4( _WorldSpaceCameraPos.xyz , 1.0) ).xyz  * unity_Scale.w );
    return (objSpaceCameraPos - v.xyz );
}
#line 20
vec3 ObjSpaceLightDir( in vec4 v ) {
    vec3 objSpaceLightPos;
    objSpaceLightPos = ( _World2Object * _WorldSpaceLightPos0 ).xyz ;
    return objSpaceLightPos.xyz ;
}
#line 116
v2f_surf xlat_main( in appdata_full v ) {
    v2f_surf o;
    vec3 binormal;
    mat3 rotation;
    TreeVertLeaf( v);
    #line 120
    o.pos = ( glstate_matrix_mvp * v.vertex );
    o.hip_pack0.xy  = ((v.texcoord.xy  * _MainTex_ST.xy ) + _MainTex_ST.zw );
    o.lop_color = v.color;
    binormal = (cross( v.normal, v.tangent.xyz ) * v.tangent.w );
    #line 124
    rotation = mat3( v.tangent.x , v.tangent.y , v.tangent.z , binormal.x , binormal.y , binormal.z , v.normal.x , v.normal.y , v.normal.z );
    o.lightDir = ( rotation * ObjSpaceLightDir( v.vertex) );
    o.viewDir = ( rotation * ObjSpaceViewDir( v.vertex) );
    o._LightCoord = ( _LightMatrix0 * ( _Object2World * v.vertex ) ).xy ;
    #line 129
    return o;
}
attribute vec4 TANGENT;
varying vec2 xlv_TEXCOORD0;
varying vec4 xlv_COLOR0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4( gl_Vertex);
    xlt_v.tangent = vec4( TANGENT);
    xlt_v.normal = vec3( gl_Normal);
    xlt_v.texcoord = vec4( gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4( gl_MultiTexCoord1);
    xlt_v.color = vec4( gl_Color);
    xl_retval = xlat_main( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_TEXCOORD0 = vec2( xl_retval.hip_pack0);
    xlv_COLOR0 = vec4( xl_retval.lop_color);
    xlv_TEXCOORD1 = vec3( xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3( xl_retval.viewDir);
    xlv_TEXCOORD3 = vec2( xl_retval._LightCoord);
}
