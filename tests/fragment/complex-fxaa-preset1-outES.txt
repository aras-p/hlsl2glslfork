#extension GL_EXT_shader_texture_lod : require
#define texture2DLod texture2DLodEXT
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return texture2DGradARB( s, coord, ddx, ddy);
}
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_TexelSize;
highp vec4 FxaaTexOff( in sampler2D tex, in highp vec2 pos, in highp vec2 off, in highp vec2 rcpFrame );
highp vec4 FxaaTexLod0( in sampler2D tex, in highp vec2 pos );
highp vec4 FxaaTexGrad( in sampler2D tex, in highp vec2 pos, in highp vec2 grad );
highp float FxaaLuma( in highp vec3 rgb );
highp vec3 FxaaLerp3( in highp vec3 a, in highp vec3 b, in highp float amountOfA );
highp vec3 FxaaFilterReturn( in highp vec3 rgb );
highp vec3 FxaaPixelShader( in highp vec2 pos, in sampler2D tex, in highp vec2 rcpFrame );
highp vec4 xlat_main( in highp vec2 uv );
#line 120
highp vec4 FxaaTexOff( in sampler2D tex, in highp vec2 pos, in highp vec2 off, in highp vec2 rcpFrame ) {
    #line 128
    return xll_tex2Dlod( tex, vec4( (pos.xy  + (off * rcpFrame)), 0.0, 0.0));
}
#line 90
highp vec4 FxaaTexLod0( in sampler2D tex, in highp vec2 pos ) {
    #line 98
    return xll_tex2Dlod( tex, vec4( pos.xy , 0.0, 0.0));
}
#line 105
highp vec4 FxaaTexGrad( in sampler2D tex, in highp vec2 pos, in highp vec2 grad ) {
    #line 113
    return xll_tex2Dgrad( tex, pos.xy , grad, grad);
}
#line 281
highp float FxaaLuma( in highp vec3 rgb ) {
    return ((rgb.y  * 1.96321) + rgb.x );
}
#line 284
highp vec3 FxaaLerp3( in highp vec3 a, in highp vec3 b, in highp float amountOfA ) {
    #line 285
    return ((vec3( ( -amountOfA ), ( -amountOfA ), ( -amountOfA )) * b) + ((a * vec3( amountOfA, amountOfA, amountOfA)) + b));
}
#line 289
highp vec3 FxaaFilterReturn( in highp vec3 rgb ) {
    #line 299
    return rgb;
}
#line 313
highp vec3 FxaaPixelShader( in highp vec2 pos, in sampler2D tex, in highp vec2 rcpFrame ) {
    highp vec3 rgbN;
    highp vec3 rgbW;
    highp vec3 rgbM;
    highp vec3 rgbE;
    highp vec3 rgbS;
    highp float lumaN;
    highp float lumaW;
    highp float lumaM;
    highp float lumaE;
    highp float lumaS;
    highp float rangeMin;
    highp float rangeMax;
    highp float range;
    highp vec3 rgbL;
    highp float lumaL;
    highp float rangeL;
    highp float blendL;
    highp vec3 rgbNW;
    highp vec3 rgbNE;
    highp vec3 rgbSW;
    highp vec3 rgbSE;
    highp float lumaNW;
    highp float lumaNE;
    highp float lumaSW;
    highp float lumaSE;
    highp float edgeVert;
    highp float edgeHorz;
    bool horzSpan;
    highp float lengthSign;
    highp float gradientN;
    highp float gradientS;
    bool pairN;
    highp vec2 posN;
    highp vec2 posP;
    highp vec2 offNP;
    highp float lumaEndN;
    highp float lumaEndP;
    bool doneN = false;
    bool doneP = false;
    highp int i = 0;
    highp float dstN;
    highp float dstP;
    bool directionN;
    highp float spanLength;
    highp float subPixelOffset;
    highp vec3 rgbF;
    rgbN = FxaaTexOff( tex, pos.xy , vec2( 0.0, -1.0), rcpFrame).xyz ;
    #line 317
    rgbW = FxaaTexOff( tex, pos.xy , vec2( -1.0, 0.0), rcpFrame).xyz ;
    rgbM = FxaaTexOff( tex, pos.xy , vec2( 0.0, 0.0), rcpFrame).xyz ;
    rgbE = FxaaTexOff( tex, pos.xy , vec2( 1.0, 0.0), rcpFrame).xyz ;
    rgbS = FxaaTexOff( tex, pos.xy , vec2( 0.0, 1.0), rcpFrame).xyz ;
    #line 321
    lumaN = FxaaLuma( rgbN);
    lumaW = FxaaLuma( rgbW);
    lumaM = FxaaLuma( rgbM);
    lumaE = FxaaLuma( rgbE);
    #line 325
    lumaS = FxaaLuma( rgbS);
    rangeMin = min( lumaM, min( min( lumaN, lumaW), min( lumaS, lumaE)));
    rangeMax = max( lumaM, max( max( lumaN, lumaW), max( lumaS, lumaE)));
    range = (rangeMax - rangeMin);
    #line 329
    if ( (range < max( 0.0625, (rangeMax * 0.125))) ){
        return FxaaFilterReturn( rgbM);
    }
    #line 336
    rgbL = ((((rgbN + rgbW) + rgbM) + rgbE) + rgbS);
    #line 342
    lumaL = ((((lumaN + lumaW) + lumaE) + lumaS) * 0.25);
    rangeL = abs( (lumaL - lumaM) );
    #line 346
    blendL = (max( 0.0, ((rangeL / range) - 0.25)) * 1.33333);
    blendL = min( 0.75, blendL);
    #line 355
    rgbNW = FxaaTexOff( tex, pos.xy , vec2( -1.0, -1.0), rcpFrame).xyz ;
    rgbNE = FxaaTexOff( tex, pos.xy , vec2( 1.0, -1.0), rcpFrame).xyz ;
    rgbSW = FxaaTexOff( tex, pos.xy , vec2( -1.0, 1.0), rcpFrame).xyz ;
    rgbSE = FxaaTexOff( tex, pos.xy , vec2( 1.0, 1.0), rcpFrame).xyz ;
    #line 360
    rgbL += (((rgbNW + rgbNE) + rgbSW) + rgbSE);
    rgbL *= vec3( 0.111111, 0.111111, 0.111111);
    lumaNW = FxaaLuma( rgbNW);
    #line 364
    lumaNE = FxaaLuma( rgbNE);
    lumaSW = FxaaLuma( rgbSW);
    lumaSE = FxaaLuma( rgbSE);
    edgeVert = ((abs( (((0.25 * lumaNW) + (-0.5 * lumaN)) + (0.25 * lumaNE)) ) + abs( (((0.5 * lumaW) + (-1.0 * lumaM)) + (0.5 * lumaE)) )) + abs( (((0.25 * lumaSW) + (-0.5 * lumaS)) + (0.25 * lumaSE)) ));
    #line 371
    edgeHorz = ((abs( (((0.25 * lumaNW) + (-0.5 * lumaW)) + (0.25 * lumaSW)) ) + abs( (((0.5 * lumaN) + (-1.0 * lumaM)) + (0.5 * lumaS)) )) + abs( (((0.25 * lumaNE) + (-0.5 * lumaE)) + (0.25 * lumaSE)) ));
    #line 375
    horzSpan = (edgeHorz >= edgeVert);
    lengthSign = (( horzSpan ) ? ( ( -rcpFrame.y  ) ) : ( ( -rcpFrame.x  ) ));
    if ( ( !horzSpan ) ){
        lumaN = lumaW;
    }
    if ( ( !horzSpan ) ){
        lumaS = lumaE;
    }
    #line 379
    gradientN = abs( (lumaN - lumaM) );
    gradientS = abs( (lumaS - lumaM) );
    lumaN = ((lumaN + lumaM) * 0.5);
    lumaS = ((lumaS + lumaM) * 0.5);
    #line 385
    pairN = (gradientN >= gradientS);
    if ( ( !pairN ) ){
        lumaN = lumaS;
    }
    if ( ( !pairN ) ){
        gradientN = gradientS;
    }
    if ( ( !pairN ) ){
        lengthSign *= -1.0;
    }
    #line 390
    posN.x  = (pos.x  + (( horzSpan ) ? ( 0.0 ) : ( (lengthSign * 0.5) )));
    posN.y  = (pos.y  + (( horzSpan ) ? ( (lengthSign * 0.5) ) : ( 0.0 )));
    #line 394
    gradientN *= 0.25;
    posP = posN;
    #line 398
    offNP = (( horzSpan ) ? ( vec2( rcpFrame.x , 0.0) ) : ( vec2( 0.0, rcpFrame.y ) ));
    lumaEndN = lumaN;
    #line 402
    lumaEndP = lumaN;
    #line 415
    posN += (offNP * vec2( -2.0, -2.0));
    posP += (offNP * vec2( 2.0, 2.0));
    offNP *= vec2( 3.0, 3.0);
    #line 424
    for ( ; (i < 4); ( i++ )) {
        #line 431
        if ( ( !doneN ) ){
            lumaEndN = FxaaLuma( FxaaTexGrad( tex, posN.xy , offNP).xyz );
        }
        if ( ( !doneP ) ){
            lumaEndP = FxaaLuma( FxaaTexGrad( tex, posP.xy , offNP).xyz );
        }
        #line 436
        doneN = (doneN || (abs( (lumaEndN - lumaN) ) >= gradientN));
        doneP = (doneP || (abs( (lumaEndP - lumaN) ) >= gradientN));
        if ( (doneN && doneP) ){
            break;
        }
        if ( ( !doneN ) ){
            posN -= offNP;
        }
        #line 440
        if ( ( !doneP ) ){
            posP += offNP;
        }
    }
    dstN = (( horzSpan ) ? ( (pos.x  - posN.x ) ) : ( (pos.y  - posN.y ) ));
    #line 444
    dstP = (( horzSpan ) ? ( (posP.x  - pos.x ) ) : ( (posP.y  - pos.y ) ));
    directionN = (dstN < dstP);
    lumaEndN = (( directionN ) ? ( lumaEndN ) : ( lumaEndP ));
    #line 449
    if ( (((lumaM - lumaN) < 0.0) == ((lumaEndN - lumaN) < 0.0)) ){
        lengthSign = 0.0;
    }
    #line 453
    spanLength = (dstP + dstN);
    dstN = (( directionN ) ? ( dstN ) : ( dstP ));
    subPixelOffset = ((0.5 + (dstN * (-1.0 / spanLength))) * lengthSign);
    rgbF = FxaaTexLod0( tex, vec2( (pos.x  + (( horzSpan ) ? ( 0.0 ) : ( subPixelOffset ))), (pos.y  + (( horzSpan ) ? ( subPixelOffset ) : ( 0.0 ))))).xyz ;
    #line 462
    return FxaaFilterReturn( FxaaLerp3( rgbL, rgbF, blendL));
}
#line 471
highp vec4 xlat_main( in highp vec2 uv ) {
    return vec4( FxaaPixelShader( uv.xy , _MainTex, _MainTex_TexelSize.xy ).xyz , 0.0);
}
varying highp vec2 xlv_TEXCOORD0;
void main() {
    highp vec4 xl_retval;
    xl_retval = xlat_main( vec2(xlv_TEXCOORD0));
    gl_FragData[0] = vec4( xl_retval);
}
